// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"siliconvali/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceIotUpdate is the builder for updating DeviceIot entities.
type DeviceIotUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceIotMutation
}

// Where appends a list predicates to the DeviceIotUpdate builder.
func (diu *DeviceIotUpdate) Where(ps ...predicate.DeviceIot) *DeviceIotUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetDisplayName sets the "display_name" field.
func (diu *DeviceIotUpdate) SetDisplayName(s string) *DeviceIotUpdate {
	diu.mutation.SetDisplayName(s)
	return diu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (diu *DeviceIotUpdate) SetNillableDisplayName(s *string) *DeviceIotUpdate {
	if s != nil {
		diu.SetDisplayName(*s)
	}
	return diu
}

// SetSerialNumber sets the "serial_number" field.
func (diu *DeviceIotUpdate) SetSerialNumber(s string) *DeviceIotUpdate {
	diu.mutation.SetSerialNumber(s)
	return diu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (diu *DeviceIotUpdate) SetNillableSerialNumber(s *string) *DeviceIotUpdate {
	if s != nil {
		diu.SetSerialNumber(*s)
	}
	return diu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (diu *DeviceIotUpdate) ClearSerialNumber() *DeviceIotUpdate {
	diu.mutation.ClearSerialNumber()
	return diu
}

// SetTypeDevice sets the "type_device" field.
func (diu *DeviceIotUpdate) SetTypeDevice(i int) *DeviceIotUpdate {
	diu.mutation.ResetTypeDevice()
	diu.mutation.SetTypeDevice(i)
	return diu
}

// SetNillableTypeDevice sets the "type_device" field if the given value is not nil.
func (diu *DeviceIotUpdate) SetNillableTypeDevice(i *int) *DeviceIotUpdate {
	if i != nil {
		diu.SetTypeDevice(*i)
	}
	return diu
}

// AddTypeDevice adds i to the "type_device" field.
func (diu *DeviceIotUpdate) AddTypeDevice(i int) *DeviceIotUpdate {
	diu.mutation.AddTypeDevice(i)
	return diu
}

// ClearTypeDevice clears the value of the "type_device" field.
func (diu *DeviceIotUpdate) ClearTypeDevice() *DeviceIotUpdate {
	diu.mutation.ClearTypeDevice()
	return diu
}

// SetUpdatedAt sets the "updated_at" field.
func (diu *DeviceIotUpdate) SetUpdatedAt(t time.Time) *DeviceIotUpdate {
	diu.mutation.SetUpdatedAt(t)
	return diu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diu *DeviceIotUpdate) SetNillableUpdatedAt(t *time.Time) *DeviceIotUpdate {
	if t != nil {
		diu.SetUpdatedAt(*t)
	}
	return diu
}

// SetOwnerID sets the "owner" edge to the MainIot entity by ID.
func (diu *DeviceIotUpdate) SetOwnerID(id int64) *DeviceIotUpdate {
	diu.mutation.SetOwnerID(id)
	return diu
}

// SetNillableOwnerID sets the "owner" edge to the MainIot entity by ID if the given value is not nil.
func (diu *DeviceIotUpdate) SetNillableOwnerID(id *int64) *DeviceIotUpdate {
	if id != nil {
		diu = diu.SetOwnerID(*id)
	}
	return diu
}

// SetOwner sets the "owner" edge to the MainIot entity.
func (diu *DeviceIotUpdate) SetOwner(m *MainIot) *DeviceIotUpdate {
	return diu.SetOwnerID(m.ID)
}

// Mutation returns the DeviceIotMutation object of the builder.
func (diu *DeviceIotUpdate) Mutation() *DeviceIotMutation {
	return diu.mutation
}

// ClearOwner clears the "owner" edge to the MainIot entity.
func (diu *DeviceIotUpdate) ClearOwner() *DeviceIotUpdate {
	diu.mutation.ClearOwner()
	return diu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DeviceIotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DeviceIotUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DeviceIotUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DeviceIotUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DeviceIotUpdate) check() error {
	if v, ok := diu.mutation.DisplayName(); ok {
		if err := deviceiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.display_name": %w`, err)}
		}
	}
	if v, ok := diu.mutation.SerialNumber(); ok {
		if err := deviceiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.serial_number": %w`, err)}
		}
	}
	return nil
}

func (diu *DeviceIotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceiot.Table, deviceiot.Columns, sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.DisplayName(); ok {
		_spec.SetField(deviceiot.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := diu.mutation.SerialNumber(); ok {
		_spec.SetField(deviceiot.FieldSerialNumber, field.TypeString, value)
	}
	if diu.mutation.SerialNumberCleared() {
		_spec.ClearField(deviceiot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := diu.mutation.TypeDevice(); ok {
		_spec.SetField(deviceiot.FieldTypeDevice, field.TypeInt, value)
	}
	if value, ok := diu.mutation.AddedTypeDevice(); ok {
		_spec.AddField(deviceiot.FieldTypeDevice, field.TypeInt, value)
	}
	if diu.mutation.TypeDeviceCleared() {
		_spec.ClearField(deviceiot.FieldTypeDevice, field.TypeInt)
	}
	if value, ok := diu.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceiot.FieldUpdatedAt, field.TypeTime, value)
	}
	if diu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceiot.OwnerTable,
			Columns: []string{deviceiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceiot.OwnerTable,
			Columns: []string{deviceiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceiot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DeviceIotUpdateOne is the builder for updating a single DeviceIot entity.
type DeviceIotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceIotMutation
}

// SetDisplayName sets the "display_name" field.
func (diuo *DeviceIotUpdateOne) SetDisplayName(s string) *DeviceIotUpdateOne {
	diuo.mutation.SetDisplayName(s)
	return diuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (diuo *DeviceIotUpdateOne) SetNillableDisplayName(s *string) *DeviceIotUpdateOne {
	if s != nil {
		diuo.SetDisplayName(*s)
	}
	return diuo
}

// SetSerialNumber sets the "serial_number" field.
func (diuo *DeviceIotUpdateOne) SetSerialNumber(s string) *DeviceIotUpdateOne {
	diuo.mutation.SetSerialNumber(s)
	return diuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (diuo *DeviceIotUpdateOne) SetNillableSerialNumber(s *string) *DeviceIotUpdateOne {
	if s != nil {
		diuo.SetSerialNumber(*s)
	}
	return diuo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (diuo *DeviceIotUpdateOne) ClearSerialNumber() *DeviceIotUpdateOne {
	diuo.mutation.ClearSerialNumber()
	return diuo
}

// SetTypeDevice sets the "type_device" field.
func (diuo *DeviceIotUpdateOne) SetTypeDevice(i int) *DeviceIotUpdateOne {
	diuo.mutation.ResetTypeDevice()
	diuo.mutation.SetTypeDevice(i)
	return diuo
}

// SetNillableTypeDevice sets the "type_device" field if the given value is not nil.
func (diuo *DeviceIotUpdateOne) SetNillableTypeDevice(i *int) *DeviceIotUpdateOne {
	if i != nil {
		diuo.SetTypeDevice(*i)
	}
	return diuo
}

// AddTypeDevice adds i to the "type_device" field.
func (diuo *DeviceIotUpdateOne) AddTypeDevice(i int) *DeviceIotUpdateOne {
	diuo.mutation.AddTypeDevice(i)
	return diuo
}

// ClearTypeDevice clears the value of the "type_device" field.
func (diuo *DeviceIotUpdateOne) ClearTypeDevice() *DeviceIotUpdateOne {
	diuo.mutation.ClearTypeDevice()
	return diuo
}

// SetUpdatedAt sets the "updated_at" field.
func (diuo *DeviceIotUpdateOne) SetUpdatedAt(t time.Time) *DeviceIotUpdateOne {
	diuo.mutation.SetUpdatedAt(t)
	return diuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diuo *DeviceIotUpdateOne) SetNillableUpdatedAt(t *time.Time) *DeviceIotUpdateOne {
	if t != nil {
		diuo.SetUpdatedAt(*t)
	}
	return diuo
}

// SetOwnerID sets the "owner" edge to the MainIot entity by ID.
func (diuo *DeviceIotUpdateOne) SetOwnerID(id int64) *DeviceIotUpdateOne {
	diuo.mutation.SetOwnerID(id)
	return diuo
}

// SetNillableOwnerID sets the "owner" edge to the MainIot entity by ID if the given value is not nil.
func (diuo *DeviceIotUpdateOne) SetNillableOwnerID(id *int64) *DeviceIotUpdateOne {
	if id != nil {
		diuo = diuo.SetOwnerID(*id)
	}
	return diuo
}

// SetOwner sets the "owner" edge to the MainIot entity.
func (diuo *DeviceIotUpdateOne) SetOwner(m *MainIot) *DeviceIotUpdateOne {
	return diuo.SetOwnerID(m.ID)
}

// Mutation returns the DeviceIotMutation object of the builder.
func (diuo *DeviceIotUpdateOne) Mutation() *DeviceIotMutation {
	return diuo.mutation
}

// ClearOwner clears the "owner" edge to the MainIot entity.
func (diuo *DeviceIotUpdateOne) ClearOwner() *DeviceIotUpdateOne {
	diuo.mutation.ClearOwner()
	return diuo
}

// Where appends a list predicates to the DeviceIotUpdate builder.
func (diuo *DeviceIotUpdateOne) Where(ps ...predicate.DeviceIot) *DeviceIotUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DeviceIotUpdateOne) Select(field string, fields ...string) *DeviceIotUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DeviceIot entity.
func (diuo *DeviceIotUpdateOne) Save(ctx context.Context) (*DeviceIot, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DeviceIotUpdateOne) SaveX(ctx context.Context) *DeviceIot {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DeviceIotUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DeviceIotUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DeviceIotUpdateOne) check() error {
	if v, ok := diuo.mutation.DisplayName(); ok {
		if err := deviceiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.display_name": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.SerialNumber(); ok {
		if err := deviceiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.serial_number": %w`, err)}
		}
	}
	return nil
}

func (diuo *DeviceIotUpdateOne) sqlSave(ctx context.Context) (_node *DeviceIot, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deviceiot.Table, deviceiot.Columns, sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceIot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceiot.FieldID)
		for _, f := range fields {
			if !deviceiot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deviceiot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.DisplayName(); ok {
		_spec.SetField(deviceiot.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := diuo.mutation.SerialNumber(); ok {
		_spec.SetField(deviceiot.FieldSerialNumber, field.TypeString, value)
	}
	if diuo.mutation.SerialNumberCleared() {
		_spec.ClearField(deviceiot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := diuo.mutation.TypeDevice(); ok {
		_spec.SetField(deviceiot.FieldTypeDevice, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.AddedTypeDevice(); ok {
		_spec.AddField(deviceiot.FieldTypeDevice, field.TypeInt, value)
	}
	if diuo.mutation.TypeDeviceCleared() {
		_spec.ClearField(deviceiot.FieldTypeDevice, field.TypeInt)
	}
	if value, ok := diuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceiot.FieldUpdatedAt, field.TypeTime, value)
	}
	if diuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceiot.OwnerTable,
			Columns: []string{deviceiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceiot.OwnerTable,
			Columns: []string{deviceiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeviceIot{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceiot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
