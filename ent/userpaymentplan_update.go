// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/plan"
	"siliconvali/ent/predicate"
	"siliconvali/ent/user"
	"siliconvali/ent/userpaymentplan"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPaymentPlanUpdate is the builder for updating UserPaymentPlan entities.
type UserPaymentPlanUpdate struct {
	config
	hooks    []Hook
	mutation *UserPaymentPlanMutation
}

// Where appends a list predicates to the UserPaymentPlanUpdate builder.
func (uppu *UserPaymentPlanUpdate) Where(ps ...predicate.UserPaymentPlan) *UserPaymentPlanUpdate {
	uppu.mutation.Where(ps...)
	return uppu
}

// SetAmount sets the "amount" field.
func (uppu *UserPaymentPlanUpdate) SetAmount(i int64) *UserPaymentPlanUpdate {
	uppu.mutation.ResetAmount()
	uppu.mutation.SetAmount(i)
	return uppu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableAmount(i *int64) *UserPaymentPlanUpdate {
	if i != nil {
		uppu.SetAmount(*i)
	}
	return uppu
}

// AddAmount adds i to the "amount" field.
func (uppu *UserPaymentPlanUpdate) AddAmount(i int64) *UserPaymentPlanUpdate {
	uppu.mutation.AddAmount(i)
	return uppu
}

// ClearAmount clears the value of the "amount" field.
func (uppu *UserPaymentPlanUpdate) ClearAmount() *UserPaymentPlanUpdate {
	uppu.mutation.ClearAmount()
	return uppu
}

// SetReferenceNumber sets the "reference_number" field.
func (uppu *UserPaymentPlanUpdate) SetReferenceNumber(s string) *UserPaymentPlanUpdate {
	uppu.mutation.SetReferenceNumber(s)
	return uppu
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableReferenceNumber(s *string) *UserPaymentPlanUpdate {
	if s != nil {
		uppu.SetReferenceNumber(*s)
	}
	return uppu
}

// SetTransactionNumber sets the "transaction_number" field.
func (uppu *UserPaymentPlanUpdate) SetTransactionNumber(s string) *UserPaymentPlanUpdate {
	uppu.mutation.SetTransactionNumber(s)
	return uppu
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableTransactionNumber(s *string) *UserPaymentPlanUpdate {
	if s != nil {
		uppu.SetTransactionNumber(*s)
	}
	return uppu
}

// ClearTransactionNumber clears the value of the "transaction_number" field.
func (uppu *UserPaymentPlanUpdate) ClearTransactionNumber() *UserPaymentPlanUpdate {
	uppu.mutation.ClearTransactionNumber()
	return uppu
}

// SetSourceAccountNumber sets the "source_account_number" field.
func (uppu *UserPaymentPlanUpdate) SetSourceAccountNumber(s string) *UserPaymentPlanUpdate {
	uppu.mutation.SetSourceAccountNumber(s)
	return uppu
}

// SetNillableSourceAccountNumber sets the "source_account_number" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableSourceAccountNumber(s *string) *UserPaymentPlanUpdate {
	if s != nil {
		uppu.SetSourceAccountNumber(*s)
	}
	return uppu
}

// ClearSourceAccountNumber clears the value of the "source_account_number" field.
func (uppu *UserPaymentPlanUpdate) ClearSourceAccountNumber() *UserPaymentPlanUpdate {
	uppu.mutation.ClearSourceAccountNumber()
	return uppu
}

// SetDestinationAccountNumber sets the "destination_account_number" field.
func (uppu *UserPaymentPlanUpdate) SetDestinationAccountNumber(s string) *UserPaymentPlanUpdate {
	uppu.mutation.SetDestinationAccountNumber(s)
	return uppu
}

// SetNillableDestinationAccountNumber sets the "destination_account_number" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableDestinationAccountNumber(s *string) *UserPaymentPlanUpdate {
	if s != nil {
		uppu.SetDestinationAccountNumber(*s)
	}
	return uppu
}

// ClearDestinationAccountNumber clears the value of the "destination_account_number" field.
func (uppu *UserPaymentPlanUpdate) ClearDestinationAccountNumber() *UserPaymentPlanUpdate {
	uppu.mutation.ClearDestinationAccountNumber()
	return uppu
}

// SetDeleted sets the "deleted" field.
func (uppu *UserPaymentPlanUpdate) SetDeleted(b bool) *UserPaymentPlanUpdate {
	uppu.mutation.SetDeleted(b)
	return uppu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uppu *UserPaymentPlanUpdate) SetNillableDeleted(b *bool) *UserPaymentPlanUpdate {
	if b != nil {
		uppu.SetDeleted(*b)
	}
	return uppu
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (uppu *UserPaymentPlanUpdate) SetUserIDID(id int64) *UserPaymentPlanUpdate {
	uppu.mutation.SetUserIDID(id)
	return uppu
}

// SetUserID sets the "user_id" edge to the User entity.
func (uppu *UserPaymentPlanUpdate) SetUserID(u *User) *UserPaymentPlanUpdate {
	return uppu.SetUserIDID(u.ID)
}

// SetPlanIDID sets the "plan_id" edge to the Plan entity by ID.
func (uppu *UserPaymentPlanUpdate) SetPlanIDID(id int) *UserPaymentPlanUpdate {
	uppu.mutation.SetPlanIDID(id)
	return uppu
}

// SetPlanID sets the "plan_id" edge to the Plan entity.
func (uppu *UserPaymentPlanUpdate) SetPlanID(p *Plan) *UserPaymentPlanUpdate {
	return uppu.SetPlanIDID(p.ID)
}

// Mutation returns the UserPaymentPlanMutation object of the builder.
func (uppu *UserPaymentPlanUpdate) Mutation() *UserPaymentPlanMutation {
	return uppu.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (uppu *UserPaymentPlanUpdate) ClearUserID() *UserPaymentPlanUpdate {
	uppu.mutation.ClearUserID()
	return uppu
}

// ClearPlanID clears the "plan_id" edge to the Plan entity.
func (uppu *UserPaymentPlanUpdate) ClearPlanID() *UserPaymentPlanUpdate {
	uppu.mutation.ClearPlanID()
	return uppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uppu *UserPaymentPlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uppu.sqlSave, uppu.mutation, uppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uppu *UserPaymentPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := uppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uppu *UserPaymentPlanUpdate) Exec(ctx context.Context) error {
	_, err := uppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uppu *UserPaymentPlanUpdate) ExecX(ctx context.Context) {
	if err := uppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uppu *UserPaymentPlanUpdate) check() error {
	if _, ok := uppu.mutation.UserIDID(); uppu.mutation.UserIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPaymentPlan.user_id"`)
	}
	if _, ok := uppu.mutation.PlanIDID(); uppu.mutation.PlanIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPaymentPlan.plan_id"`)
	}
	return nil
}

func (uppu *UserPaymentPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpaymentplan.Table, userpaymentplan.Columns, sqlgraph.NewFieldSpec(userpaymentplan.FieldID, field.TypeInt64))
	if ps := uppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uppu.mutation.Amount(); ok {
		_spec.SetField(userpaymentplan.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := uppu.mutation.AddedAmount(); ok {
		_spec.AddField(userpaymentplan.FieldAmount, field.TypeInt64, value)
	}
	if uppu.mutation.AmountCleared() {
		_spec.ClearField(userpaymentplan.FieldAmount, field.TypeInt64)
	}
	if value, ok := uppu.mutation.ReferenceNumber(); ok {
		_spec.SetField(userpaymentplan.FieldReferenceNumber, field.TypeString, value)
	}
	if value, ok := uppu.mutation.TransactionNumber(); ok {
		_spec.SetField(userpaymentplan.FieldTransactionNumber, field.TypeString, value)
	}
	if uppu.mutation.TransactionNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldTransactionNumber, field.TypeString)
	}
	if value, ok := uppu.mutation.SourceAccountNumber(); ok {
		_spec.SetField(userpaymentplan.FieldSourceAccountNumber, field.TypeString, value)
	}
	if uppu.mutation.SourceAccountNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldSourceAccountNumber, field.TypeString)
	}
	if value, ok := uppu.mutation.DestinationAccountNumber(); ok {
		_spec.SetField(userpaymentplan.FieldDestinationAccountNumber, field.TypeString, value)
	}
	if uppu.mutation.DestinationAccountNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldDestinationAccountNumber, field.TypeString)
	}
	if value, ok := uppu.mutation.Deleted(); ok {
		_spec.SetField(userpaymentplan.FieldDeleted, field.TypeBool, value)
	}
	if uppu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.UserIDTable,
			Columns: []string{userpaymentplan.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.UserIDTable,
			Columns: []string{userpaymentplan.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uppu.mutation.PlanIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.PlanIDTable,
			Columns: []string{userpaymentplan.PlanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppu.mutation.PlanIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.PlanIDTable,
			Columns: []string{userpaymentplan.PlanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpaymentplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uppu.mutation.done = true
	return n, nil
}

// UserPaymentPlanUpdateOne is the builder for updating a single UserPaymentPlan entity.
type UserPaymentPlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPaymentPlanMutation
}

// SetAmount sets the "amount" field.
func (uppuo *UserPaymentPlanUpdateOne) SetAmount(i int64) *UserPaymentPlanUpdateOne {
	uppuo.mutation.ResetAmount()
	uppuo.mutation.SetAmount(i)
	return uppuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableAmount(i *int64) *UserPaymentPlanUpdateOne {
	if i != nil {
		uppuo.SetAmount(*i)
	}
	return uppuo
}

// AddAmount adds i to the "amount" field.
func (uppuo *UserPaymentPlanUpdateOne) AddAmount(i int64) *UserPaymentPlanUpdateOne {
	uppuo.mutation.AddAmount(i)
	return uppuo
}

// ClearAmount clears the value of the "amount" field.
func (uppuo *UserPaymentPlanUpdateOne) ClearAmount() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearAmount()
	return uppuo
}

// SetReferenceNumber sets the "reference_number" field.
func (uppuo *UserPaymentPlanUpdateOne) SetReferenceNumber(s string) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetReferenceNumber(s)
	return uppuo
}

// SetNillableReferenceNumber sets the "reference_number" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableReferenceNumber(s *string) *UserPaymentPlanUpdateOne {
	if s != nil {
		uppuo.SetReferenceNumber(*s)
	}
	return uppuo
}

// SetTransactionNumber sets the "transaction_number" field.
func (uppuo *UserPaymentPlanUpdateOne) SetTransactionNumber(s string) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetTransactionNumber(s)
	return uppuo
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableTransactionNumber(s *string) *UserPaymentPlanUpdateOne {
	if s != nil {
		uppuo.SetTransactionNumber(*s)
	}
	return uppuo
}

// ClearTransactionNumber clears the value of the "transaction_number" field.
func (uppuo *UserPaymentPlanUpdateOne) ClearTransactionNumber() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearTransactionNumber()
	return uppuo
}

// SetSourceAccountNumber sets the "source_account_number" field.
func (uppuo *UserPaymentPlanUpdateOne) SetSourceAccountNumber(s string) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetSourceAccountNumber(s)
	return uppuo
}

// SetNillableSourceAccountNumber sets the "source_account_number" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableSourceAccountNumber(s *string) *UserPaymentPlanUpdateOne {
	if s != nil {
		uppuo.SetSourceAccountNumber(*s)
	}
	return uppuo
}

// ClearSourceAccountNumber clears the value of the "source_account_number" field.
func (uppuo *UserPaymentPlanUpdateOne) ClearSourceAccountNumber() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearSourceAccountNumber()
	return uppuo
}

// SetDestinationAccountNumber sets the "destination_account_number" field.
func (uppuo *UserPaymentPlanUpdateOne) SetDestinationAccountNumber(s string) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetDestinationAccountNumber(s)
	return uppuo
}

// SetNillableDestinationAccountNumber sets the "destination_account_number" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableDestinationAccountNumber(s *string) *UserPaymentPlanUpdateOne {
	if s != nil {
		uppuo.SetDestinationAccountNumber(*s)
	}
	return uppuo
}

// ClearDestinationAccountNumber clears the value of the "destination_account_number" field.
func (uppuo *UserPaymentPlanUpdateOne) ClearDestinationAccountNumber() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearDestinationAccountNumber()
	return uppuo
}

// SetDeleted sets the "deleted" field.
func (uppuo *UserPaymentPlanUpdateOne) SetDeleted(b bool) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetDeleted(b)
	return uppuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uppuo *UserPaymentPlanUpdateOne) SetNillableDeleted(b *bool) *UserPaymentPlanUpdateOne {
	if b != nil {
		uppuo.SetDeleted(*b)
	}
	return uppuo
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (uppuo *UserPaymentPlanUpdateOne) SetUserIDID(id int64) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetUserIDID(id)
	return uppuo
}

// SetUserID sets the "user_id" edge to the User entity.
func (uppuo *UserPaymentPlanUpdateOne) SetUserID(u *User) *UserPaymentPlanUpdateOne {
	return uppuo.SetUserIDID(u.ID)
}

// SetPlanIDID sets the "plan_id" edge to the Plan entity by ID.
func (uppuo *UserPaymentPlanUpdateOne) SetPlanIDID(id int) *UserPaymentPlanUpdateOne {
	uppuo.mutation.SetPlanIDID(id)
	return uppuo
}

// SetPlanID sets the "plan_id" edge to the Plan entity.
func (uppuo *UserPaymentPlanUpdateOne) SetPlanID(p *Plan) *UserPaymentPlanUpdateOne {
	return uppuo.SetPlanIDID(p.ID)
}

// Mutation returns the UserPaymentPlanMutation object of the builder.
func (uppuo *UserPaymentPlanUpdateOne) Mutation() *UserPaymentPlanMutation {
	return uppuo.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (uppuo *UserPaymentPlanUpdateOne) ClearUserID() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearUserID()
	return uppuo
}

// ClearPlanID clears the "plan_id" edge to the Plan entity.
func (uppuo *UserPaymentPlanUpdateOne) ClearPlanID() *UserPaymentPlanUpdateOne {
	uppuo.mutation.ClearPlanID()
	return uppuo
}

// Where appends a list predicates to the UserPaymentPlanUpdate builder.
func (uppuo *UserPaymentPlanUpdateOne) Where(ps ...predicate.UserPaymentPlan) *UserPaymentPlanUpdateOne {
	uppuo.mutation.Where(ps...)
	return uppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uppuo *UserPaymentPlanUpdateOne) Select(field string, fields ...string) *UserPaymentPlanUpdateOne {
	uppuo.fields = append([]string{field}, fields...)
	return uppuo
}

// Save executes the query and returns the updated UserPaymentPlan entity.
func (uppuo *UserPaymentPlanUpdateOne) Save(ctx context.Context) (*UserPaymentPlan, error) {
	return withHooks(ctx, uppuo.sqlSave, uppuo.mutation, uppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uppuo *UserPaymentPlanUpdateOne) SaveX(ctx context.Context) *UserPaymentPlan {
	node, err := uppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uppuo *UserPaymentPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := uppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uppuo *UserPaymentPlanUpdateOne) ExecX(ctx context.Context) {
	if err := uppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uppuo *UserPaymentPlanUpdateOne) check() error {
	if _, ok := uppuo.mutation.UserIDID(); uppuo.mutation.UserIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPaymentPlan.user_id"`)
	}
	if _, ok := uppuo.mutation.PlanIDID(); uppuo.mutation.PlanIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPaymentPlan.plan_id"`)
	}
	return nil
}

func (uppuo *UserPaymentPlanUpdateOne) sqlSave(ctx context.Context) (_node *UserPaymentPlan, err error) {
	if err := uppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpaymentplan.Table, userpaymentplan.Columns, sqlgraph.NewFieldSpec(userpaymentplan.FieldID, field.TypeInt64))
	id, ok := uppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPaymentPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpaymentplan.FieldID)
		for _, f := range fields {
			if !userpaymentplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpaymentplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uppuo.mutation.Amount(); ok {
		_spec.SetField(userpaymentplan.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := uppuo.mutation.AddedAmount(); ok {
		_spec.AddField(userpaymentplan.FieldAmount, field.TypeInt64, value)
	}
	if uppuo.mutation.AmountCleared() {
		_spec.ClearField(userpaymentplan.FieldAmount, field.TypeInt64)
	}
	if value, ok := uppuo.mutation.ReferenceNumber(); ok {
		_spec.SetField(userpaymentplan.FieldReferenceNumber, field.TypeString, value)
	}
	if value, ok := uppuo.mutation.TransactionNumber(); ok {
		_spec.SetField(userpaymentplan.FieldTransactionNumber, field.TypeString, value)
	}
	if uppuo.mutation.TransactionNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldTransactionNumber, field.TypeString)
	}
	if value, ok := uppuo.mutation.SourceAccountNumber(); ok {
		_spec.SetField(userpaymentplan.FieldSourceAccountNumber, field.TypeString, value)
	}
	if uppuo.mutation.SourceAccountNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldSourceAccountNumber, field.TypeString)
	}
	if value, ok := uppuo.mutation.DestinationAccountNumber(); ok {
		_spec.SetField(userpaymentplan.FieldDestinationAccountNumber, field.TypeString, value)
	}
	if uppuo.mutation.DestinationAccountNumberCleared() {
		_spec.ClearField(userpaymentplan.FieldDestinationAccountNumber, field.TypeString)
	}
	if value, ok := uppuo.mutation.Deleted(); ok {
		_spec.SetField(userpaymentplan.FieldDeleted, field.TypeBool, value)
	}
	if uppuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.UserIDTable,
			Columns: []string{userpaymentplan.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.UserIDTable,
			Columns: []string{userpaymentplan.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uppuo.mutation.PlanIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.PlanIDTable,
			Columns: []string{userpaymentplan.PlanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppuo.mutation.PlanIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpaymentplan.PlanIDTable,
			Columns: []string{userpaymentplan.PlanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPaymentPlan{config: uppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpaymentplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uppuo.mutation.done = true
	return _node, nil
}
