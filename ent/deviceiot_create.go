// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceIotCreate is the builder for creating a DeviceIot entity.
type DeviceIotCreate struct {
	config
	mutation *DeviceIotMutation
	hooks    []Hook
}

// SetDisplayName sets the "display_name" field.
func (dic *DeviceIotCreate) SetDisplayName(s string) *DeviceIotCreate {
	dic.mutation.SetDisplayName(s)
	return dic
}

// SetSerialNumber sets the "serial_number" field.
func (dic *DeviceIotCreate) SetSerialNumber(s string) *DeviceIotCreate {
	dic.mutation.SetSerialNumber(s)
	return dic
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (dic *DeviceIotCreate) SetNillableSerialNumber(s *string) *DeviceIotCreate {
	if s != nil {
		dic.SetSerialNumber(*s)
	}
	return dic
}

// SetTypeDevice sets the "type_device" field.
func (dic *DeviceIotCreate) SetTypeDevice(i int) *DeviceIotCreate {
	dic.mutation.SetTypeDevice(i)
	return dic
}

// SetNillableTypeDevice sets the "type_device" field if the given value is not nil.
func (dic *DeviceIotCreate) SetNillableTypeDevice(i *int) *DeviceIotCreate {
	if i != nil {
		dic.SetTypeDevice(*i)
	}
	return dic
}

// SetCreatedAt sets the "created_at" field.
func (dic *DeviceIotCreate) SetCreatedAt(t time.Time) *DeviceIotCreate {
	dic.mutation.SetCreatedAt(t)
	return dic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dic *DeviceIotCreate) SetNillableCreatedAt(t *time.Time) *DeviceIotCreate {
	if t != nil {
		dic.SetCreatedAt(*t)
	}
	return dic
}

// SetUpdatedAt sets the "updated_at" field.
func (dic *DeviceIotCreate) SetUpdatedAt(t time.Time) *DeviceIotCreate {
	dic.mutation.SetUpdatedAt(t)
	return dic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dic *DeviceIotCreate) SetNillableUpdatedAt(t *time.Time) *DeviceIotCreate {
	if t != nil {
		dic.SetUpdatedAt(*t)
	}
	return dic
}

// SetID sets the "id" field.
func (dic *DeviceIotCreate) SetID(i int64) *DeviceIotCreate {
	dic.mutation.SetID(i)
	return dic
}

// SetOwnerID sets the "owner" edge to the MainIot entity by ID.
func (dic *DeviceIotCreate) SetOwnerID(id int64) *DeviceIotCreate {
	dic.mutation.SetOwnerID(id)
	return dic
}

// SetNillableOwnerID sets the "owner" edge to the MainIot entity by ID if the given value is not nil.
func (dic *DeviceIotCreate) SetNillableOwnerID(id *int64) *DeviceIotCreate {
	if id != nil {
		dic = dic.SetOwnerID(*id)
	}
	return dic
}

// SetOwner sets the "owner" edge to the MainIot entity.
func (dic *DeviceIotCreate) SetOwner(m *MainIot) *DeviceIotCreate {
	return dic.SetOwnerID(m.ID)
}

// Mutation returns the DeviceIotMutation object of the builder.
func (dic *DeviceIotCreate) Mutation() *DeviceIotMutation {
	return dic.mutation
}

// Save creates the DeviceIot in the database.
func (dic *DeviceIotCreate) Save(ctx context.Context) (*DeviceIot, error) {
	dic.defaults()
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeviceIotCreate) SaveX(ctx context.Context) *DeviceIot {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeviceIotCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeviceIotCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DeviceIotCreate) defaults() {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		v := deviceiot.DefaultCreatedAt()
		dic.mutation.SetCreatedAt(v)
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		v := deviceiot.DefaultUpdatedAt
		dic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeviceIotCreate) check() error {
	if _, ok := dic.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "DeviceIot.display_name"`)}
	}
	if v, ok := dic.mutation.DisplayName(); ok {
		if err := deviceiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.display_name": %w`, err)}
		}
	}
	if v, ok := dic.mutation.SerialNumber(); ok {
		if err := deviceiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "DeviceIot.serial_number": %w`, err)}
		}
	}
	if _, ok := dic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeviceIot.created_at"`)}
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeviceIot.updated_at"`)}
	}
	return nil
}

func (dic *DeviceIotCreate) sqlSave(ctx context.Context) (*DeviceIot, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DeviceIotCreate) createSpec() (*DeviceIot, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceIot{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(deviceiot.Table, sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64))
	)
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dic.mutation.DisplayName(); ok {
		_spec.SetField(deviceiot.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dic.mutation.SerialNumber(); ok {
		_spec.SetField(deviceiot.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = &value
	}
	if value, ok := dic.mutation.TypeDevice(); ok {
		_spec.SetField(deviceiot.FieldTypeDevice, field.TypeInt, value)
		_node.TypeDevice = &value
	}
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.SetField(deviceiot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceiot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dic.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deviceiot.OwnerTable,
			Columns: []string{deviceiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.main_iot_deviceiots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceIotCreateBulk is the builder for creating many DeviceIot entities in bulk.
type DeviceIotCreateBulk struct {
	config
	err      error
	builders []*DeviceIotCreate
}

// Save creates the DeviceIot entities in the database.
func (dicb *DeviceIotCreateBulk) Save(ctx context.Context) ([]*DeviceIot, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeviceIot, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceIotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeviceIotCreateBulk) SaveX(ctx context.Context) []*DeviceIot {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeviceIotCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeviceIotCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
