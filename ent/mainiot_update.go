// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"siliconvali/ent/predicate"
	"siliconvali/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MainIotUpdate is the builder for updating MainIot entities.
type MainIotUpdate struct {
	config
	hooks    []Hook
	mutation *MainIotMutation
}

// Where appends a list predicates to the MainIotUpdate builder.
func (miu *MainIotUpdate) Where(ps ...predicate.MainIot) *MainIotUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetDisplayName sets the "display_name" field.
func (miu *MainIotUpdate) SetDisplayName(s string) *MainIotUpdate {
	miu.mutation.SetDisplayName(s)
	return miu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableDisplayName(s *string) *MainIotUpdate {
	if s != nil {
		miu.SetDisplayName(*s)
	}
	return miu
}

// SetLat sets the "lat" field.
func (miu *MainIotUpdate) SetLat(f float64) *MainIotUpdate {
	miu.mutation.ResetLat()
	miu.mutation.SetLat(f)
	return miu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableLat(f *float64) *MainIotUpdate {
	if f != nil {
		miu.SetLat(*f)
	}
	return miu
}

// AddLat adds f to the "lat" field.
func (miu *MainIotUpdate) AddLat(f float64) *MainIotUpdate {
	miu.mutation.AddLat(f)
	return miu
}

// ClearLat clears the value of the "lat" field.
func (miu *MainIotUpdate) ClearLat() *MainIotUpdate {
	miu.mutation.ClearLat()
	return miu
}

// SetLon sets the "lon" field.
func (miu *MainIotUpdate) SetLon(f float64) *MainIotUpdate {
	miu.mutation.ResetLon()
	miu.mutation.SetLon(f)
	return miu
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableLon(f *float64) *MainIotUpdate {
	if f != nil {
		miu.SetLon(*f)
	}
	return miu
}

// AddLon adds f to the "lon" field.
func (miu *MainIotUpdate) AddLon(f float64) *MainIotUpdate {
	miu.mutation.AddLon(f)
	return miu
}

// ClearLon clears the value of the "lon" field.
func (miu *MainIotUpdate) ClearLon() *MainIotUpdate {
	miu.mutation.ClearLon()
	return miu
}

// SetAddress sets the "address" field.
func (miu *MainIotUpdate) SetAddress(s string) *MainIotUpdate {
	miu.mutation.SetAddress(s)
	return miu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableAddress(s *string) *MainIotUpdate {
	if s != nil {
		miu.SetAddress(*s)
	}
	return miu
}

// ClearAddress clears the value of the "address" field.
func (miu *MainIotUpdate) ClearAddress() *MainIotUpdate {
	miu.mutation.ClearAddress()
	return miu
}

// SetSerialNumber sets the "serial_number" field.
func (miu *MainIotUpdate) SetSerialNumber(s string) *MainIotUpdate {
	miu.mutation.SetSerialNumber(s)
	return miu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableSerialNumber(s *string) *MainIotUpdate {
	if s != nil {
		miu.SetSerialNumber(*s)
	}
	return miu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (miu *MainIotUpdate) ClearSerialNumber() *MainIotUpdate {
	miu.mutation.ClearSerialNumber()
	return miu
}

// SetMACAddress sets the "mac_address" field.
func (miu *MainIotUpdate) SetMACAddress(s string) *MainIotUpdate {
	miu.mutation.SetMACAddress(s)
	return miu
}

// SetNillableMACAddress sets the "mac_address" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableMACAddress(s *string) *MainIotUpdate {
	if s != nil {
		miu.SetMACAddress(*s)
	}
	return miu
}

// ClearMACAddress clears the value of the "mac_address" field.
func (miu *MainIotUpdate) ClearMACAddress() *MainIotUpdate {
	miu.mutation.ClearMACAddress()
	return miu
}

// SetIPRemote sets the "ip_remote" field.
func (miu *MainIotUpdate) SetIPRemote(s string) *MainIotUpdate {
	miu.mutation.SetIPRemote(s)
	return miu
}

// SetNillableIPRemote sets the "ip_remote" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableIPRemote(s *string) *MainIotUpdate {
	if s != nil {
		miu.SetIPRemote(*s)
	}
	return miu
}

// ClearIPRemote clears the value of the "ip_remote" field.
func (miu *MainIotUpdate) ClearIPRemote() *MainIotUpdate {
	miu.mutation.ClearIPRemote()
	return miu
}

// SetUpdatedAt sets the "updated_at" field.
func (miu *MainIotUpdate) SetUpdatedAt(t time.Time) *MainIotUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (miu *MainIotUpdate) SetNillableUpdatedAt(t *time.Time) *MainIotUpdate {
	if t != nil {
		miu.SetUpdatedAt(*t)
	}
	return miu
}

// AddDeviceiotIDs adds the "deviceiots" edge to the DeviceIot entity by IDs.
func (miu *MainIotUpdate) AddDeviceiotIDs(ids ...int64) *MainIotUpdate {
	miu.mutation.AddDeviceiotIDs(ids...)
	return miu
}

// AddDeviceiots adds the "deviceiots" edges to the DeviceIot entity.
func (miu *MainIotUpdate) AddDeviceiots(d ...*DeviceIot) *MainIotUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return miu.AddDeviceiotIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (miu *MainIotUpdate) SetOwnerID(id int64) *MainIotUpdate {
	miu.mutation.SetOwnerID(id)
	return miu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (miu *MainIotUpdate) SetNillableOwnerID(id *int64) *MainIotUpdate {
	if id != nil {
		miu = miu.SetOwnerID(*id)
	}
	return miu
}

// SetOwner sets the "owner" edge to the User entity.
func (miu *MainIotUpdate) SetOwner(u *User) *MainIotUpdate {
	return miu.SetOwnerID(u.ID)
}

// Mutation returns the MainIotMutation object of the builder.
func (miu *MainIotUpdate) Mutation() *MainIotMutation {
	return miu.mutation
}

// ClearDeviceiots clears all "deviceiots" edges to the DeviceIot entity.
func (miu *MainIotUpdate) ClearDeviceiots() *MainIotUpdate {
	miu.mutation.ClearDeviceiots()
	return miu
}

// RemoveDeviceiotIDs removes the "deviceiots" edge to DeviceIot entities by IDs.
func (miu *MainIotUpdate) RemoveDeviceiotIDs(ids ...int64) *MainIotUpdate {
	miu.mutation.RemoveDeviceiotIDs(ids...)
	return miu
}

// RemoveDeviceiots removes "deviceiots" edges to DeviceIot entities.
func (miu *MainIotUpdate) RemoveDeviceiots(d ...*DeviceIot) *MainIotUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return miu.RemoveDeviceiotIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (miu *MainIotUpdate) ClearOwner() *MainIotUpdate {
	miu.mutation.ClearOwner()
	return miu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MainIotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MainIotUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MainIotUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MainIotUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *MainIotUpdate) check() error {
	if v, ok := miu.mutation.DisplayName(); ok {
		if err := mainiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "MainIot.display_name": %w`, err)}
		}
	}
	if v, ok := miu.mutation.Address(); ok {
		if err := mainiot.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "MainIot.address": %w`, err)}
		}
	}
	if v, ok := miu.mutation.SerialNumber(); ok {
		if err := mainiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "MainIot.serial_number": %w`, err)}
		}
	}
	if v, ok := miu.mutation.MACAddress(); ok {
		if err := mainiot.MACAddressValidator(v); err != nil {
			return &ValidationError{Name: "mac_address", err: fmt.Errorf(`ent: validator failed for field "MainIot.mac_address": %w`, err)}
		}
	}
	if v, ok := miu.mutation.IPRemote(); ok {
		if err := mainiot.IPRemoteValidator(v); err != nil {
			return &ValidationError{Name: "ip_remote", err: fmt.Errorf(`ent: validator failed for field "MainIot.ip_remote": %w`, err)}
		}
	}
	return nil
}

func (miu *MainIotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mainiot.Table, mainiot.Columns, sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.DisplayName(); ok {
		_spec.SetField(mainiot.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := miu.mutation.Lat(); ok {
		_spec.SetField(mainiot.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.AddedLat(); ok {
		_spec.AddField(mainiot.FieldLat, field.TypeFloat64, value)
	}
	if miu.mutation.LatCleared() {
		_spec.ClearField(mainiot.FieldLat, field.TypeFloat64)
	}
	if value, ok := miu.mutation.Lon(); ok {
		_spec.SetField(mainiot.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.AddedLon(); ok {
		_spec.AddField(mainiot.FieldLon, field.TypeFloat64, value)
	}
	if miu.mutation.LonCleared() {
		_spec.ClearField(mainiot.FieldLon, field.TypeFloat64)
	}
	if value, ok := miu.mutation.Address(); ok {
		_spec.SetField(mainiot.FieldAddress, field.TypeString, value)
	}
	if miu.mutation.AddressCleared() {
		_spec.ClearField(mainiot.FieldAddress, field.TypeString)
	}
	if value, ok := miu.mutation.SerialNumber(); ok {
		_spec.SetField(mainiot.FieldSerialNumber, field.TypeString, value)
	}
	if miu.mutation.SerialNumberCleared() {
		_spec.ClearField(mainiot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := miu.mutation.MACAddress(); ok {
		_spec.SetField(mainiot.FieldMACAddress, field.TypeString, value)
	}
	if miu.mutation.MACAddressCleared() {
		_spec.ClearField(mainiot.FieldMACAddress, field.TypeString)
	}
	if value, ok := miu.mutation.IPRemote(); ok {
		_spec.SetField(mainiot.FieldIPRemote, field.TypeString, value)
	}
	if miu.mutation.IPRemoteCleared() {
		_spec.ClearField(mainiot.FieldIPRemote, field.TypeString)
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.SetField(mainiot.FieldUpdatedAt, field.TypeTime, value)
	}
	if miu.mutation.DeviceiotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedDeviceiotsIDs(); len(nodes) > 0 && !miu.mutation.DeviceiotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.DeviceiotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mainiot.OwnerTable,
			Columns: []string{mainiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mainiot.OwnerTable,
			Columns: []string{mainiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mainiot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MainIotUpdateOne is the builder for updating a single MainIot entity.
type MainIotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MainIotMutation
}

// SetDisplayName sets the "display_name" field.
func (miuo *MainIotUpdateOne) SetDisplayName(s string) *MainIotUpdateOne {
	miuo.mutation.SetDisplayName(s)
	return miuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableDisplayName(s *string) *MainIotUpdateOne {
	if s != nil {
		miuo.SetDisplayName(*s)
	}
	return miuo
}

// SetLat sets the "lat" field.
func (miuo *MainIotUpdateOne) SetLat(f float64) *MainIotUpdateOne {
	miuo.mutation.ResetLat()
	miuo.mutation.SetLat(f)
	return miuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableLat(f *float64) *MainIotUpdateOne {
	if f != nil {
		miuo.SetLat(*f)
	}
	return miuo
}

// AddLat adds f to the "lat" field.
func (miuo *MainIotUpdateOne) AddLat(f float64) *MainIotUpdateOne {
	miuo.mutation.AddLat(f)
	return miuo
}

// ClearLat clears the value of the "lat" field.
func (miuo *MainIotUpdateOne) ClearLat() *MainIotUpdateOne {
	miuo.mutation.ClearLat()
	return miuo
}

// SetLon sets the "lon" field.
func (miuo *MainIotUpdateOne) SetLon(f float64) *MainIotUpdateOne {
	miuo.mutation.ResetLon()
	miuo.mutation.SetLon(f)
	return miuo
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableLon(f *float64) *MainIotUpdateOne {
	if f != nil {
		miuo.SetLon(*f)
	}
	return miuo
}

// AddLon adds f to the "lon" field.
func (miuo *MainIotUpdateOne) AddLon(f float64) *MainIotUpdateOne {
	miuo.mutation.AddLon(f)
	return miuo
}

// ClearLon clears the value of the "lon" field.
func (miuo *MainIotUpdateOne) ClearLon() *MainIotUpdateOne {
	miuo.mutation.ClearLon()
	return miuo
}

// SetAddress sets the "address" field.
func (miuo *MainIotUpdateOne) SetAddress(s string) *MainIotUpdateOne {
	miuo.mutation.SetAddress(s)
	return miuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableAddress(s *string) *MainIotUpdateOne {
	if s != nil {
		miuo.SetAddress(*s)
	}
	return miuo
}

// ClearAddress clears the value of the "address" field.
func (miuo *MainIotUpdateOne) ClearAddress() *MainIotUpdateOne {
	miuo.mutation.ClearAddress()
	return miuo
}

// SetSerialNumber sets the "serial_number" field.
func (miuo *MainIotUpdateOne) SetSerialNumber(s string) *MainIotUpdateOne {
	miuo.mutation.SetSerialNumber(s)
	return miuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableSerialNumber(s *string) *MainIotUpdateOne {
	if s != nil {
		miuo.SetSerialNumber(*s)
	}
	return miuo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (miuo *MainIotUpdateOne) ClearSerialNumber() *MainIotUpdateOne {
	miuo.mutation.ClearSerialNumber()
	return miuo
}

// SetMACAddress sets the "mac_address" field.
func (miuo *MainIotUpdateOne) SetMACAddress(s string) *MainIotUpdateOne {
	miuo.mutation.SetMACAddress(s)
	return miuo
}

// SetNillableMACAddress sets the "mac_address" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableMACAddress(s *string) *MainIotUpdateOne {
	if s != nil {
		miuo.SetMACAddress(*s)
	}
	return miuo
}

// ClearMACAddress clears the value of the "mac_address" field.
func (miuo *MainIotUpdateOne) ClearMACAddress() *MainIotUpdateOne {
	miuo.mutation.ClearMACAddress()
	return miuo
}

// SetIPRemote sets the "ip_remote" field.
func (miuo *MainIotUpdateOne) SetIPRemote(s string) *MainIotUpdateOne {
	miuo.mutation.SetIPRemote(s)
	return miuo
}

// SetNillableIPRemote sets the "ip_remote" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableIPRemote(s *string) *MainIotUpdateOne {
	if s != nil {
		miuo.SetIPRemote(*s)
	}
	return miuo
}

// ClearIPRemote clears the value of the "ip_remote" field.
func (miuo *MainIotUpdateOne) ClearIPRemote() *MainIotUpdateOne {
	miuo.mutation.ClearIPRemote()
	return miuo
}

// SetUpdatedAt sets the "updated_at" field.
func (miuo *MainIotUpdateOne) SetUpdatedAt(t time.Time) *MainIotUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableUpdatedAt(t *time.Time) *MainIotUpdateOne {
	if t != nil {
		miuo.SetUpdatedAt(*t)
	}
	return miuo
}

// AddDeviceiotIDs adds the "deviceiots" edge to the DeviceIot entity by IDs.
func (miuo *MainIotUpdateOne) AddDeviceiotIDs(ids ...int64) *MainIotUpdateOne {
	miuo.mutation.AddDeviceiotIDs(ids...)
	return miuo
}

// AddDeviceiots adds the "deviceiots" edges to the DeviceIot entity.
func (miuo *MainIotUpdateOne) AddDeviceiots(d ...*DeviceIot) *MainIotUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return miuo.AddDeviceiotIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (miuo *MainIotUpdateOne) SetOwnerID(id int64) *MainIotUpdateOne {
	miuo.mutation.SetOwnerID(id)
	return miuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (miuo *MainIotUpdateOne) SetNillableOwnerID(id *int64) *MainIotUpdateOne {
	if id != nil {
		miuo = miuo.SetOwnerID(*id)
	}
	return miuo
}

// SetOwner sets the "owner" edge to the User entity.
func (miuo *MainIotUpdateOne) SetOwner(u *User) *MainIotUpdateOne {
	return miuo.SetOwnerID(u.ID)
}

// Mutation returns the MainIotMutation object of the builder.
func (miuo *MainIotUpdateOne) Mutation() *MainIotMutation {
	return miuo.mutation
}

// ClearDeviceiots clears all "deviceiots" edges to the DeviceIot entity.
func (miuo *MainIotUpdateOne) ClearDeviceiots() *MainIotUpdateOne {
	miuo.mutation.ClearDeviceiots()
	return miuo
}

// RemoveDeviceiotIDs removes the "deviceiots" edge to DeviceIot entities by IDs.
func (miuo *MainIotUpdateOne) RemoveDeviceiotIDs(ids ...int64) *MainIotUpdateOne {
	miuo.mutation.RemoveDeviceiotIDs(ids...)
	return miuo
}

// RemoveDeviceiots removes "deviceiots" edges to DeviceIot entities.
func (miuo *MainIotUpdateOne) RemoveDeviceiots(d ...*DeviceIot) *MainIotUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return miuo.RemoveDeviceiotIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (miuo *MainIotUpdateOne) ClearOwner() *MainIotUpdateOne {
	miuo.mutation.ClearOwner()
	return miuo
}

// Where appends a list predicates to the MainIotUpdate builder.
func (miuo *MainIotUpdateOne) Where(ps ...predicate.MainIot) *MainIotUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MainIotUpdateOne) Select(field string, fields ...string) *MainIotUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MainIot entity.
func (miuo *MainIotUpdateOne) Save(ctx context.Context) (*MainIot, error) {
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MainIotUpdateOne) SaveX(ctx context.Context) *MainIot {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MainIotUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MainIotUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *MainIotUpdateOne) check() error {
	if v, ok := miuo.mutation.DisplayName(); ok {
		if err := mainiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "MainIot.display_name": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.Address(); ok {
		if err := mainiot.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "MainIot.address": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.SerialNumber(); ok {
		if err := mainiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "MainIot.serial_number": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.MACAddress(); ok {
		if err := mainiot.MACAddressValidator(v); err != nil {
			return &ValidationError{Name: "mac_address", err: fmt.Errorf(`ent: validator failed for field "MainIot.mac_address": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.IPRemote(); ok {
		if err := mainiot.IPRemoteValidator(v); err != nil {
			return &ValidationError{Name: "ip_remote", err: fmt.Errorf(`ent: validator failed for field "MainIot.ip_remote": %w`, err)}
		}
	}
	return nil
}

func (miuo *MainIotUpdateOne) sqlSave(ctx context.Context) (_node *MainIot, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mainiot.Table, mainiot.Columns, sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MainIot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mainiot.FieldID)
		for _, f := range fields {
			if !mainiot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mainiot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.DisplayName(); ok {
		_spec.SetField(mainiot.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Lat(); ok {
		_spec.SetField(mainiot.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.AddedLat(); ok {
		_spec.AddField(mainiot.FieldLat, field.TypeFloat64, value)
	}
	if miuo.mutation.LatCleared() {
		_spec.ClearField(mainiot.FieldLat, field.TypeFloat64)
	}
	if value, ok := miuo.mutation.Lon(); ok {
		_spec.SetField(mainiot.FieldLon, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.AddedLon(); ok {
		_spec.AddField(mainiot.FieldLon, field.TypeFloat64, value)
	}
	if miuo.mutation.LonCleared() {
		_spec.ClearField(mainiot.FieldLon, field.TypeFloat64)
	}
	if value, ok := miuo.mutation.Address(); ok {
		_spec.SetField(mainiot.FieldAddress, field.TypeString, value)
	}
	if miuo.mutation.AddressCleared() {
		_spec.ClearField(mainiot.FieldAddress, field.TypeString)
	}
	if value, ok := miuo.mutation.SerialNumber(); ok {
		_spec.SetField(mainiot.FieldSerialNumber, field.TypeString, value)
	}
	if miuo.mutation.SerialNumberCleared() {
		_spec.ClearField(mainiot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := miuo.mutation.MACAddress(); ok {
		_spec.SetField(mainiot.FieldMACAddress, field.TypeString, value)
	}
	if miuo.mutation.MACAddressCleared() {
		_spec.ClearField(mainiot.FieldMACAddress, field.TypeString)
	}
	if value, ok := miuo.mutation.IPRemote(); ok {
		_spec.SetField(mainiot.FieldIPRemote, field.TypeString, value)
	}
	if miuo.mutation.IPRemoteCleared() {
		_spec.ClearField(mainiot.FieldIPRemote, field.TypeString)
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.SetField(mainiot.FieldUpdatedAt, field.TypeTime, value)
	}
	if miuo.mutation.DeviceiotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedDeviceiotsIDs(); len(nodes) > 0 && !miuo.mutation.DeviceiotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.DeviceiotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mainiot.OwnerTable,
			Columns: []string{mainiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mainiot.OwnerTable,
			Columns: []string{mainiot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MainIot{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mainiot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
