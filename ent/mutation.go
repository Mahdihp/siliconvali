// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"siliconvali/ent/predicate"
	"siliconvali/ent/role"
	"siliconvali/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDeviceIot = "DeviceIot"
	TypeMainIot   = "MainIot"
	TypeRole      = "Role"
	TypeUser      = "User"
)

// DeviceIotMutation represents an operation that mutates the DeviceIot nodes in the graph.
type DeviceIotMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	display_name   *string
	serial_number  *string
	type_device    *int
	addtype_device *int
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	owner          *int64
	clearedowner   bool
	done           bool
	oldValue       func(context.Context) (*DeviceIot, error)
	predicates     []predicate.DeviceIot
}

var _ ent.Mutation = (*DeviceIotMutation)(nil)

// deviceiotOption allows management of the mutation configuration using functional options.
type deviceiotOption func(*DeviceIotMutation)

// newDeviceIotMutation creates new mutation for the DeviceIot entity.
func newDeviceIotMutation(c config, op Op, opts ...deviceiotOption) *DeviceIotMutation {
	m := &DeviceIotMutation{
		config:        c,
		op:            op,
		typ:           TypeDeviceIot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceIotID sets the ID field of the mutation.
func withDeviceIotID(id int64) deviceiotOption {
	return func(m *DeviceIotMutation) {
		var (
			err   error
			once  sync.Once
			value *DeviceIot
		)
		m.oldValue = func(ctx context.Context) (*DeviceIot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeviceIot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeviceIot sets the old DeviceIot of the mutation.
func withDeviceIot(node *DeviceIot) deviceiotOption {
	return func(m *DeviceIotMutation) {
		m.oldValue = func(context.Context) (*DeviceIot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceIotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceIotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeviceIot entities.
func (m *DeviceIotMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceIotMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceIotMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeviceIot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *DeviceIotMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *DeviceIotMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the DeviceIot entity.
// If the DeviceIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceIotMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *DeviceIotMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetSerialNumber sets the "serial_number" field.
func (m *DeviceIotMutation) SetSerialNumber(s string) {
	m.serial_number = &s
}

// SerialNumber returns the value of the "serial_number" field in the mutation.
func (m *DeviceIotMutation) SerialNumber() (r string, exists bool) {
	v := m.serial_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSerialNumber returns the old "serial_number" field's value of the DeviceIot entity.
// If the DeviceIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceIotMutation) OldSerialNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerialNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerialNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerialNumber: %w", err)
	}
	return oldValue.SerialNumber, nil
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (m *DeviceIotMutation) ClearSerialNumber() {
	m.serial_number = nil
	m.clearedFields[deviceiot.FieldSerialNumber] = struct{}{}
}

// SerialNumberCleared returns if the "serial_number" field was cleared in this mutation.
func (m *DeviceIotMutation) SerialNumberCleared() bool {
	_, ok := m.clearedFields[deviceiot.FieldSerialNumber]
	return ok
}

// ResetSerialNumber resets all changes to the "serial_number" field.
func (m *DeviceIotMutation) ResetSerialNumber() {
	m.serial_number = nil
	delete(m.clearedFields, deviceiot.FieldSerialNumber)
}

// SetTypeDevice sets the "type_device" field.
func (m *DeviceIotMutation) SetTypeDevice(i int) {
	m.type_device = &i
	m.addtype_device = nil
}

// TypeDevice returns the value of the "type_device" field in the mutation.
func (m *DeviceIotMutation) TypeDevice() (r int, exists bool) {
	v := m.type_device
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeDevice returns the old "type_device" field's value of the DeviceIot entity.
// If the DeviceIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceIotMutation) OldTypeDevice(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeDevice: %w", err)
	}
	return oldValue.TypeDevice, nil
}

// AddTypeDevice adds i to the "type_device" field.
func (m *DeviceIotMutation) AddTypeDevice(i int) {
	if m.addtype_device != nil {
		*m.addtype_device += i
	} else {
		m.addtype_device = &i
	}
}

// AddedTypeDevice returns the value that was added to the "type_device" field in this mutation.
func (m *DeviceIotMutation) AddedTypeDevice() (r int, exists bool) {
	v := m.addtype_device
	if v == nil {
		return
	}
	return *v, true
}

// ClearTypeDevice clears the value of the "type_device" field.
func (m *DeviceIotMutation) ClearTypeDevice() {
	m.type_device = nil
	m.addtype_device = nil
	m.clearedFields[deviceiot.FieldTypeDevice] = struct{}{}
}

// TypeDeviceCleared returns if the "type_device" field was cleared in this mutation.
func (m *DeviceIotMutation) TypeDeviceCleared() bool {
	_, ok := m.clearedFields[deviceiot.FieldTypeDevice]
	return ok
}

// ResetTypeDevice resets all changes to the "type_device" field.
func (m *DeviceIotMutation) ResetTypeDevice() {
	m.type_device = nil
	m.addtype_device = nil
	delete(m.clearedFields, deviceiot.FieldTypeDevice)
}

// SetCreatedAt sets the "created_at" field.
func (m *DeviceIotMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeviceIotMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DeviceIot entity.
// If the DeviceIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceIotMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeviceIotMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeviceIotMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeviceIotMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DeviceIot entity.
// If the DeviceIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceIotMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeviceIotMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetOwnerID sets the "owner" edge to the MainIot entity by id.
func (m *DeviceIotMutation) SetOwnerID(id int64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the MainIot entity.
func (m *DeviceIotMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the MainIot entity was cleared.
func (m *DeviceIotMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *DeviceIotMutation) OwnerID() (id int64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *DeviceIotMutation) OwnerIDs() (ids []int64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *DeviceIotMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the DeviceIotMutation builder.
func (m *DeviceIotMutation) Where(ps ...predicate.DeviceIot) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceIotMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceIotMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DeviceIot, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceIotMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceIotMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DeviceIot).
func (m *DeviceIotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceIotMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.display_name != nil {
		fields = append(fields, deviceiot.FieldDisplayName)
	}
	if m.serial_number != nil {
		fields = append(fields, deviceiot.FieldSerialNumber)
	}
	if m.type_device != nil {
		fields = append(fields, deviceiot.FieldTypeDevice)
	}
	if m.created_at != nil {
		fields = append(fields, deviceiot.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deviceiot.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceIotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deviceiot.FieldDisplayName:
		return m.DisplayName()
	case deviceiot.FieldSerialNumber:
		return m.SerialNumber()
	case deviceiot.FieldTypeDevice:
		return m.TypeDevice()
	case deviceiot.FieldCreatedAt:
		return m.CreatedAt()
	case deviceiot.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceIotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deviceiot.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case deviceiot.FieldSerialNumber:
		return m.OldSerialNumber(ctx)
	case deviceiot.FieldTypeDevice:
		return m.OldTypeDevice(ctx)
	case deviceiot.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deviceiot.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DeviceIot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceIotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deviceiot.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case deviceiot.FieldSerialNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerialNumber(v)
		return nil
	case deviceiot.FieldTypeDevice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeDevice(v)
		return nil
	case deviceiot.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deviceiot.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceIot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceIotMutation) AddedFields() []string {
	var fields []string
	if m.addtype_device != nil {
		fields = append(fields, deviceiot.FieldTypeDevice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceIotMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deviceiot.FieldTypeDevice:
		return m.AddedTypeDevice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceIotMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deviceiot.FieldTypeDevice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTypeDevice(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceIot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceIotMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deviceiot.FieldSerialNumber) {
		fields = append(fields, deviceiot.FieldSerialNumber)
	}
	if m.FieldCleared(deviceiot.FieldTypeDevice) {
		fields = append(fields, deviceiot.FieldTypeDevice)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceIotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceIotMutation) ClearField(name string) error {
	switch name {
	case deviceiot.FieldSerialNumber:
		m.ClearSerialNumber()
		return nil
	case deviceiot.FieldTypeDevice:
		m.ClearTypeDevice()
		return nil
	}
	return fmt.Errorf("unknown DeviceIot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceIotMutation) ResetField(name string) error {
	switch name {
	case deviceiot.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case deviceiot.FieldSerialNumber:
		m.ResetSerialNumber()
		return nil
	case deviceiot.FieldTypeDevice:
		m.ResetTypeDevice()
		return nil
	case deviceiot.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deviceiot.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DeviceIot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceIotMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, deviceiot.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceIotMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deviceiot.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceIotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceIotMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceIotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, deviceiot.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceIotMutation) EdgeCleared(name string) bool {
	switch name {
	case deviceiot.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceIotMutation) ClearEdge(name string) error {
	switch name {
	case deviceiot.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown DeviceIot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceIotMutation) ResetEdge(name string) error {
	switch name {
	case deviceiot.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown DeviceIot edge %s", name)
}

// MainIotMutation represents an operation that mutates the MainIot nodes in the graph.
type MainIotMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	display_name      *string
	lat               *float64
	addlat            *float64
	lon               *float64
	addlon            *float64
	address           *string
	serial_number     *string
	mac_address       *string
	ip_remote         *string
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	deviceiots        map[int64]struct{}
	removeddeviceiots map[int64]struct{}
	cleareddeviceiots bool
	owner             *int64
	clearedowner      bool
	done              bool
	oldValue          func(context.Context) (*MainIot, error)
	predicates        []predicate.MainIot
}

var _ ent.Mutation = (*MainIotMutation)(nil)

// mainiotOption allows management of the mutation configuration using functional options.
type mainiotOption func(*MainIotMutation)

// newMainIotMutation creates new mutation for the MainIot entity.
func newMainIotMutation(c config, op Op, opts ...mainiotOption) *MainIotMutation {
	m := &MainIotMutation{
		config:        c,
		op:            op,
		typ:           TypeMainIot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMainIotID sets the ID field of the mutation.
func withMainIotID(id int64) mainiotOption {
	return func(m *MainIotMutation) {
		var (
			err   error
			once  sync.Once
			value *MainIot
		)
		m.oldValue = func(ctx context.Context) (*MainIot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MainIot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMainIot sets the old MainIot of the mutation.
func withMainIot(node *MainIot) mainiotOption {
	return func(m *MainIotMutation) {
		m.oldValue = func(context.Context) (*MainIot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MainIotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MainIotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MainIot entities.
func (m *MainIotMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MainIotMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MainIotMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MainIot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *MainIotMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *MainIotMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *MainIotMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetLat sets the "lat" field.
func (m *MainIotMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *MainIotMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldLat(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *MainIotMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *MainIotMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ClearLat clears the value of the "lat" field.
func (m *MainIotMutation) ClearLat() {
	m.lat = nil
	m.addlat = nil
	m.clearedFields[mainiot.FieldLat] = struct{}{}
}

// LatCleared returns if the "lat" field was cleared in this mutation.
func (m *MainIotMutation) LatCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldLat]
	return ok
}

// ResetLat resets all changes to the "lat" field.
func (m *MainIotMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
	delete(m.clearedFields, mainiot.FieldLat)
}

// SetLon sets the "lon" field.
func (m *MainIotMutation) SetLon(f float64) {
	m.lon = &f
	m.addlon = nil
}

// Lon returns the value of the "lon" field in the mutation.
func (m *MainIotMutation) Lon() (r float64, exists bool) {
	v := m.lon
	if v == nil {
		return
	}
	return *v, true
}

// OldLon returns the old "lon" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldLon(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLon: %w", err)
	}
	return oldValue.Lon, nil
}

// AddLon adds f to the "lon" field.
func (m *MainIotMutation) AddLon(f float64) {
	if m.addlon != nil {
		*m.addlon += f
	} else {
		m.addlon = &f
	}
}

// AddedLon returns the value that was added to the "lon" field in this mutation.
func (m *MainIotMutation) AddedLon() (r float64, exists bool) {
	v := m.addlon
	if v == nil {
		return
	}
	return *v, true
}

// ClearLon clears the value of the "lon" field.
func (m *MainIotMutation) ClearLon() {
	m.lon = nil
	m.addlon = nil
	m.clearedFields[mainiot.FieldLon] = struct{}{}
}

// LonCleared returns if the "lon" field was cleared in this mutation.
func (m *MainIotMutation) LonCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldLon]
	return ok
}

// ResetLon resets all changes to the "lon" field.
func (m *MainIotMutation) ResetLon() {
	m.lon = nil
	m.addlon = nil
	delete(m.clearedFields, mainiot.FieldLon)
}

// SetAddress sets the "address" field.
func (m *MainIotMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *MainIotMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *MainIotMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[mainiot.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *MainIotMutation) AddressCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *MainIotMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, mainiot.FieldAddress)
}

// SetSerialNumber sets the "serial_number" field.
func (m *MainIotMutation) SetSerialNumber(s string) {
	m.serial_number = &s
}

// SerialNumber returns the value of the "serial_number" field in the mutation.
func (m *MainIotMutation) SerialNumber() (r string, exists bool) {
	v := m.serial_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSerialNumber returns the old "serial_number" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldSerialNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerialNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerialNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerialNumber: %w", err)
	}
	return oldValue.SerialNumber, nil
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (m *MainIotMutation) ClearSerialNumber() {
	m.serial_number = nil
	m.clearedFields[mainiot.FieldSerialNumber] = struct{}{}
}

// SerialNumberCleared returns if the "serial_number" field was cleared in this mutation.
func (m *MainIotMutation) SerialNumberCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldSerialNumber]
	return ok
}

// ResetSerialNumber resets all changes to the "serial_number" field.
func (m *MainIotMutation) ResetSerialNumber() {
	m.serial_number = nil
	delete(m.clearedFields, mainiot.FieldSerialNumber)
}

// SetMACAddress sets the "mac_address" field.
func (m *MainIotMutation) SetMACAddress(s string) {
	m.mac_address = &s
}

// MACAddress returns the value of the "mac_address" field in the mutation.
func (m *MainIotMutation) MACAddress() (r string, exists bool) {
	v := m.mac_address
	if v == nil {
		return
	}
	return *v, true
}

// OldMACAddress returns the old "mac_address" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldMACAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMACAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMACAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMACAddress: %w", err)
	}
	return oldValue.MACAddress, nil
}

// ClearMACAddress clears the value of the "mac_address" field.
func (m *MainIotMutation) ClearMACAddress() {
	m.mac_address = nil
	m.clearedFields[mainiot.FieldMACAddress] = struct{}{}
}

// MACAddressCleared returns if the "mac_address" field was cleared in this mutation.
func (m *MainIotMutation) MACAddressCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldMACAddress]
	return ok
}

// ResetMACAddress resets all changes to the "mac_address" field.
func (m *MainIotMutation) ResetMACAddress() {
	m.mac_address = nil
	delete(m.clearedFields, mainiot.FieldMACAddress)
}

// SetIPRemote sets the "ip_remote" field.
func (m *MainIotMutation) SetIPRemote(s string) {
	m.ip_remote = &s
}

// IPRemote returns the value of the "ip_remote" field in the mutation.
func (m *MainIotMutation) IPRemote() (r string, exists bool) {
	v := m.ip_remote
	if v == nil {
		return
	}
	return *v, true
}

// OldIPRemote returns the old "ip_remote" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldIPRemote(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPRemote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPRemote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPRemote: %w", err)
	}
	return oldValue.IPRemote, nil
}

// ClearIPRemote clears the value of the "ip_remote" field.
func (m *MainIotMutation) ClearIPRemote() {
	m.ip_remote = nil
	m.clearedFields[mainiot.FieldIPRemote] = struct{}{}
}

// IPRemoteCleared returns if the "ip_remote" field was cleared in this mutation.
func (m *MainIotMutation) IPRemoteCleared() bool {
	_, ok := m.clearedFields[mainiot.FieldIPRemote]
	return ok
}

// ResetIPRemote resets all changes to the "ip_remote" field.
func (m *MainIotMutation) ResetIPRemote() {
	m.ip_remote = nil
	delete(m.clearedFields, mainiot.FieldIPRemote)
}

// SetCreatedAt sets the "created_at" field.
func (m *MainIotMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MainIotMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MainIotMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MainIotMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MainIotMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MainIot entity.
// If the MainIot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MainIotMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MainIotMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddDeviceiotIDs adds the "deviceiots" edge to the DeviceIot entity by ids.
func (m *MainIotMutation) AddDeviceiotIDs(ids ...int64) {
	if m.deviceiots == nil {
		m.deviceiots = make(map[int64]struct{})
	}
	for i := range ids {
		m.deviceiots[ids[i]] = struct{}{}
	}
}

// ClearDeviceiots clears the "deviceiots" edge to the DeviceIot entity.
func (m *MainIotMutation) ClearDeviceiots() {
	m.cleareddeviceiots = true
}

// DeviceiotsCleared reports if the "deviceiots" edge to the DeviceIot entity was cleared.
func (m *MainIotMutation) DeviceiotsCleared() bool {
	return m.cleareddeviceiots
}

// RemoveDeviceiotIDs removes the "deviceiots" edge to the DeviceIot entity by IDs.
func (m *MainIotMutation) RemoveDeviceiotIDs(ids ...int64) {
	if m.removeddeviceiots == nil {
		m.removeddeviceiots = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.deviceiots, ids[i])
		m.removeddeviceiots[ids[i]] = struct{}{}
	}
}

// RemovedDeviceiots returns the removed IDs of the "deviceiots" edge to the DeviceIot entity.
func (m *MainIotMutation) RemovedDeviceiotsIDs() (ids []int64) {
	for id := range m.removeddeviceiots {
		ids = append(ids, id)
	}
	return
}

// DeviceiotsIDs returns the "deviceiots" edge IDs in the mutation.
func (m *MainIotMutation) DeviceiotsIDs() (ids []int64) {
	for id := range m.deviceiots {
		ids = append(ids, id)
	}
	return
}

// ResetDeviceiots resets all changes to the "deviceiots" edge.
func (m *MainIotMutation) ResetDeviceiots() {
	m.deviceiots = nil
	m.cleareddeviceiots = false
	m.removeddeviceiots = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *MainIotMutation) SetOwnerID(id int64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *MainIotMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *MainIotMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *MainIotMutation) OwnerID() (id int64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MainIotMutation) OwnerIDs() (ids []int64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *MainIotMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the MainIotMutation builder.
func (m *MainIotMutation) Where(ps ...predicate.MainIot) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MainIotMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MainIotMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MainIot, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MainIotMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MainIotMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MainIot).
func (m *MainIotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MainIotMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.display_name != nil {
		fields = append(fields, mainiot.FieldDisplayName)
	}
	if m.lat != nil {
		fields = append(fields, mainiot.FieldLat)
	}
	if m.lon != nil {
		fields = append(fields, mainiot.FieldLon)
	}
	if m.address != nil {
		fields = append(fields, mainiot.FieldAddress)
	}
	if m.serial_number != nil {
		fields = append(fields, mainiot.FieldSerialNumber)
	}
	if m.mac_address != nil {
		fields = append(fields, mainiot.FieldMACAddress)
	}
	if m.ip_remote != nil {
		fields = append(fields, mainiot.FieldIPRemote)
	}
	if m.created_at != nil {
		fields = append(fields, mainiot.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mainiot.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MainIotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mainiot.FieldDisplayName:
		return m.DisplayName()
	case mainiot.FieldLat:
		return m.Lat()
	case mainiot.FieldLon:
		return m.Lon()
	case mainiot.FieldAddress:
		return m.Address()
	case mainiot.FieldSerialNumber:
		return m.SerialNumber()
	case mainiot.FieldMACAddress:
		return m.MACAddress()
	case mainiot.FieldIPRemote:
		return m.IPRemote()
	case mainiot.FieldCreatedAt:
		return m.CreatedAt()
	case mainiot.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MainIotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mainiot.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case mainiot.FieldLat:
		return m.OldLat(ctx)
	case mainiot.FieldLon:
		return m.OldLon(ctx)
	case mainiot.FieldAddress:
		return m.OldAddress(ctx)
	case mainiot.FieldSerialNumber:
		return m.OldSerialNumber(ctx)
	case mainiot.FieldMACAddress:
		return m.OldMACAddress(ctx)
	case mainiot.FieldIPRemote:
		return m.OldIPRemote(ctx)
	case mainiot.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mainiot.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MainIot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MainIotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mainiot.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case mainiot.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case mainiot.FieldLon:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLon(v)
		return nil
	case mainiot.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case mainiot.FieldSerialNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerialNumber(v)
		return nil
	case mainiot.FieldMACAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMACAddress(v)
		return nil
	case mainiot.FieldIPRemote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPRemote(v)
		return nil
	case mainiot.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mainiot.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MainIot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MainIotMutation) AddedFields() []string {
	var fields []string
	if m.addlat != nil {
		fields = append(fields, mainiot.FieldLat)
	}
	if m.addlon != nil {
		fields = append(fields, mainiot.FieldLon)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MainIotMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mainiot.FieldLat:
		return m.AddedLat()
	case mainiot.FieldLon:
		return m.AddedLon()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MainIotMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mainiot.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case mainiot.FieldLon:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLon(v)
		return nil
	}
	return fmt.Errorf("unknown MainIot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MainIotMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mainiot.FieldLat) {
		fields = append(fields, mainiot.FieldLat)
	}
	if m.FieldCleared(mainiot.FieldLon) {
		fields = append(fields, mainiot.FieldLon)
	}
	if m.FieldCleared(mainiot.FieldAddress) {
		fields = append(fields, mainiot.FieldAddress)
	}
	if m.FieldCleared(mainiot.FieldSerialNumber) {
		fields = append(fields, mainiot.FieldSerialNumber)
	}
	if m.FieldCleared(mainiot.FieldMACAddress) {
		fields = append(fields, mainiot.FieldMACAddress)
	}
	if m.FieldCleared(mainiot.FieldIPRemote) {
		fields = append(fields, mainiot.FieldIPRemote)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MainIotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MainIotMutation) ClearField(name string) error {
	switch name {
	case mainiot.FieldLat:
		m.ClearLat()
		return nil
	case mainiot.FieldLon:
		m.ClearLon()
		return nil
	case mainiot.FieldAddress:
		m.ClearAddress()
		return nil
	case mainiot.FieldSerialNumber:
		m.ClearSerialNumber()
		return nil
	case mainiot.FieldMACAddress:
		m.ClearMACAddress()
		return nil
	case mainiot.FieldIPRemote:
		m.ClearIPRemote()
		return nil
	}
	return fmt.Errorf("unknown MainIot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MainIotMutation) ResetField(name string) error {
	switch name {
	case mainiot.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case mainiot.FieldLat:
		m.ResetLat()
		return nil
	case mainiot.FieldLon:
		m.ResetLon()
		return nil
	case mainiot.FieldAddress:
		m.ResetAddress()
		return nil
	case mainiot.FieldSerialNumber:
		m.ResetSerialNumber()
		return nil
	case mainiot.FieldMACAddress:
		m.ResetMACAddress()
		return nil
	case mainiot.FieldIPRemote:
		m.ResetIPRemote()
		return nil
	case mainiot.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mainiot.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MainIot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MainIotMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.deviceiots != nil {
		edges = append(edges, mainiot.EdgeDeviceiots)
	}
	if m.owner != nil {
		edges = append(edges, mainiot.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MainIotMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mainiot.EdgeDeviceiots:
		ids := make([]ent.Value, 0, len(m.deviceiots))
		for id := range m.deviceiots {
			ids = append(ids, id)
		}
		return ids
	case mainiot.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MainIotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddeviceiots != nil {
		edges = append(edges, mainiot.EdgeDeviceiots)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MainIotMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mainiot.EdgeDeviceiots:
		ids := make([]ent.Value, 0, len(m.removeddeviceiots))
		for id := range m.removeddeviceiots {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MainIotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddeviceiots {
		edges = append(edges, mainiot.EdgeDeviceiots)
	}
	if m.clearedowner {
		edges = append(edges, mainiot.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MainIotMutation) EdgeCleared(name string) bool {
	switch name {
	case mainiot.EdgeDeviceiots:
		return m.cleareddeviceiots
	case mainiot.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MainIotMutation) ClearEdge(name string) error {
	switch name {
	case mainiot.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown MainIot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MainIotMutation) ResetEdge(name string) error {
	switch name {
	case mainiot.EdgeDeviceiots:
		m.ResetDeviceiots()
		return nil
	case mainiot.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown MainIot edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op            Op
	typ           string
	id            *int16
	name          *string
	description   *string
	clearedFields map[string]struct{}
	users         map[int64]struct{}
	removedusers  map[int64]struct{}
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*Role, error)
	predicates    []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id int16) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id int16) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id int16, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]int16, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int16{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RoleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RoleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RoleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[role.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RoleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[role.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RoleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, role.FieldDescription)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *RoleMutation) AddUserIDs(ids ...int64) {
	if m.users == nil {
		m.users = make(map[int64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *RoleMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *RoleMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *RoleMutation) RemoveUserIDs(ids ...int64) {
	if m.removedusers == nil {
		m.removedusers = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *RoleMutation) RemovedUsersIDs() (ids []int64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *RoleMutation) UsersIDs() (ids []int64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *RoleMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.description != nil {
		fields = append(fields, role.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldName:
		return m.Name()
	case role.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(role.FieldDescription) {
		fields = append(fields, role.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	switch name {
	case role.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, role.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	username        *string
	firstname       *string
	lastname        *string
	mobile          *string
	national_code   *string
	address         *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	roles           map[int16]struct{}
	removedroles    map[int16]struct{}
	clearedroles    bool
	mainiots        map[int64]struct{}
	removedmainiots map[int64]struct{}
	clearedmainiots bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetFirstname sets the "firstname" field.
func (m *UserMutation) SetFirstname(s string) {
	m.firstname = &s
}

// Firstname returns the value of the "firstname" field in the mutation.
func (m *UserMutation) Firstname() (r string, exists bool) {
	v := m.firstname
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstname returns the old "firstname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstname: %w", err)
	}
	return oldValue.Firstname, nil
}

// ClearFirstname clears the value of the "firstname" field.
func (m *UserMutation) ClearFirstname() {
	m.firstname = nil
	m.clearedFields[user.FieldFirstname] = struct{}{}
}

// FirstnameCleared returns if the "firstname" field was cleared in this mutation.
func (m *UserMutation) FirstnameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstname]
	return ok
}

// ResetFirstname resets all changes to the "firstname" field.
func (m *UserMutation) ResetFirstname() {
	m.firstname = nil
	delete(m.clearedFields, user.FieldFirstname)
}

// SetLastname sets the "lastname" field.
func (m *UserMutation) SetLastname(s string) {
	m.lastname = &s
}

// Lastname returns the value of the "lastname" field in the mutation.
func (m *UserMutation) Lastname() (r string, exists bool) {
	v := m.lastname
	if v == nil {
		return
	}
	return *v, true
}

// OldLastname returns the old "lastname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastname: %w", err)
	}
	return oldValue.Lastname, nil
}

// ClearLastname clears the value of the "lastname" field.
func (m *UserMutation) ClearLastname() {
	m.lastname = nil
	m.clearedFields[user.FieldLastname] = struct{}{}
}

// LastnameCleared returns if the "lastname" field was cleared in this mutation.
func (m *UserMutation) LastnameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastname]
	return ok
}

// ResetLastname resets all changes to the "lastname" field.
func (m *UserMutation) ResetLastname() {
	m.lastname = nil
	delete(m.clearedFields, user.FieldLastname)
}

// SetMobile sets the "mobile" field.
func (m *UserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *UserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *UserMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[user.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *UserMutation) MobileCleared() bool {
	_, ok := m.clearedFields[user.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *UserMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, user.FieldMobile)
}

// SetNationalCode sets the "national_code" field.
func (m *UserMutation) SetNationalCode(s string) {
	m.national_code = &s
}

// NationalCode returns the value of the "national_code" field in the mutation.
func (m *UserMutation) NationalCode() (r string, exists bool) {
	v := m.national_code
	if v == nil {
		return
	}
	return *v, true
}

// OldNationalCode returns the old "national_code" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNationalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNationalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNationalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNationalCode: %w", err)
	}
	return oldValue.NationalCode, nil
}

// ClearNationalCode clears the value of the "national_code" field.
func (m *UserMutation) ClearNationalCode() {
	m.national_code = nil
	m.clearedFields[user.FieldNationalCode] = struct{}{}
}

// NationalCodeCleared returns if the "national_code" field was cleared in this mutation.
func (m *UserMutation) NationalCodeCleared() bool {
	_, ok := m.clearedFields[user.FieldNationalCode]
	return ok
}

// ResetNationalCode resets all changes to the "national_code" field.
func (m *UserMutation) ResetNationalCode() {
	m.national_code = nil
	delete(m.clearedFields, user.FieldNationalCode)
}

// SetAddress sets the "address" field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *UserMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[user.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *UserMutation) AddressCleared() bool {
	_, ok := m.clearedFields[user.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, user.FieldAddress)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *UserMutation) AddRoleIDs(ids ...int16) {
	if m.roles == nil {
		m.roles = make(map[int16]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *UserMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *UserMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *UserMutation) RemoveRoleIDs(ids ...int16) {
	if m.removedroles == nil {
		m.removedroles = make(map[int16]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *UserMutation) RemovedRolesIDs() (ids []int16) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *UserMutation) RolesIDs() (ids []int16) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *UserMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// AddMainiotIDs adds the "mainiots" edge to the MainIot entity by ids.
func (m *UserMutation) AddMainiotIDs(ids ...int64) {
	if m.mainiots == nil {
		m.mainiots = make(map[int64]struct{})
	}
	for i := range ids {
		m.mainiots[ids[i]] = struct{}{}
	}
}

// ClearMainiots clears the "mainiots" edge to the MainIot entity.
func (m *UserMutation) ClearMainiots() {
	m.clearedmainiots = true
}

// MainiotsCleared reports if the "mainiots" edge to the MainIot entity was cleared.
func (m *UserMutation) MainiotsCleared() bool {
	return m.clearedmainiots
}

// RemoveMainiotIDs removes the "mainiots" edge to the MainIot entity by IDs.
func (m *UserMutation) RemoveMainiotIDs(ids ...int64) {
	if m.removedmainiots == nil {
		m.removedmainiots = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.mainiots, ids[i])
		m.removedmainiots[ids[i]] = struct{}{}
	}
}

// RemovedMainiots returns the removed IDs of the "mainiots" edge to the MainIot entity.
func (m *UserMutation) RemovedMainiotsIDs() (ids []int64) {
	for id := range m.removedmainiots {
		ids = append(ids, id)
	}
	return
}

// MainiotsIDs returns the "mainiots" edge IDs in the mutation.
func (m *UserMutation) MainiotsIDs() (ids []int64) {
	for id := range m.mainiots {
		ids = append(ids, id)
	}
	return
}

// ResetMainiots resets all changes to the "mainiots" edge.
func (m *UserMutation) ResetMainiots() {
	m.mainiots = nil
	m.clearedmainiots = false
	m.removedmainiots = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.firstname != nil {
		fields = append(fields, user.FieldFirstname)
	}
	if m.lastname != nil {
		fields = append(fields, user.FieldLastname)
	}
	if m.mobile != nil {
		fields = append(fields, user.FieldMobile)
	}
	if m.national_code != nil {
		fields = append(fields, user.FieldNationalCode)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldFirstname:
		return m.Firstname()
	case user.FieldLastname:
		return m.Lastname()
	case user.FieldMobile:
		return m.Mobile()
	case user.FieldNationalCode:
		return m.NationalCode()
	case user.FieldAddress:
		return m.Address()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldFirstname:
		return m.OldFirstname(ctx)
	case user.FieldLastname:
		return m.OldLastname(ctx)
	case user.FieldMobile:
		return m.OldMobile(ctx)
	case user.FieldNationalCode:
		return m.OldNationalCode(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldFirstname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstname(v)
		return nil
	case user.FieldLastname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastname(v)
		return nil
	case user.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case user.FieldNationalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNationalCode(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFirstname) {
		fields = append(fields, user.FieldFirstname)
	}
	if m.FieldCleared(user.FieldLastname) {
		fields = append(fields, user.FieldLastname)
	}
	if m.FieldCleared(user.FieldMobile) {
		fields = append(fields, user.FieldMobile)
	}
	if m.FieldCleared(user.FieldNationalCode) {
		fields = append(fields, user.FieldNationalCode)
	}
	if m.FieldCleared(user.FieldAddress) {
		fields = append(fields, user.FieldAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFirstname:
		m.ClearFirstname()
		return nil
	case user.FieldLastname:
		m.ClearLastname()
		return nil
	case user.FieldMobile:
		m.ClearMobile()
		return nil
	case user.FieldNationalCode:
		m.ClearNationalCode()
		return nil
	case user.FieldAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldFirstname:
		m.ResetFirstname()
		return nil
	case user.FieldLastname:
		m.ResetLastname()
		return nil
	case user.FieldMobile:
		m.ResetMobile()
		return nil
	case user.FieldNationalCode:
		m.ResetNationalCode()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.roles != nil {
		edges = append(edges, user.EdgeRoles)
	}
	if m.mainiots != nil {
		edges = append(edges, user.EdgeMainiots)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMainiots:
		ids := make([]ent.Value, 0, len(m.mainiots))
		for id := range m.mainiots {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroles != nil {
		edges = append(edges, user.EdgeRoles)
	}
	if m.removedmainiots != nil {
		edges = append(edges, user.EdgeMainiots)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMainiots:
		ids := make([]ent.Value, 0, len(m.removedmainiots))
		for id := range m.removedmainiots {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedroles {
		edges = append(edges, user.EdgeRoles)
	}
	if m.clearedmainiots {
		edges = append(edges, user.EdgeMainiots)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRoles:
		return m.clearedroles
	case user.EdgeMainiots:
		return m.clearedmainiots
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRoles:
		m.ResetRoles()
		return nil
	case user.EdgeMainiots:
		m.ResetMainiots()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
