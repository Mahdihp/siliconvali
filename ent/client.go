// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"siliconvali/ent/migrate"

	"siliconvali/ent/devicedetails"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"siliconvali/ent/payment"
	"siliconvali/ent/plan"
	"siliconvali/ent/role"
	"siliconvali/ent/user"
	"siliconvali/ent/userpaymentplan"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DeviceDetails is the client for interacting with the DeviceDetails builders.
	DeviceDetails *DeviceDetailsClient
	// DeviceIot is the client for interacting with the DeviceIot builders.
	DeviceIot *DeviceIotClient
	// MainIot is the client for interacting with the MainIot builders.
	MainIot *MainIotClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPaymentPlan is the client for interacting with the UserPaymentPlan builders.
	UserPaymentPlan *UserPaymentPlanClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DeviceDetails = NewDeviceDetailsClient(c.config)
	c.DeviceIot = NewDeviceIotClient(c.config)
	c.MainIot = NewMainIotClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPaymentPlan = NewUserPaymentPlanClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DeviceDetails:   NewDeviceDetailsClient(cfg),
		DeviceIot:       NewDeviceIotClient(cfg),
		MainIot:         NewMainIotClient(cfg),
		Payment:         NewPaymentClient(cfg),
		Plan:            NewPlanClient(cfg),
		Role:            NewRoleClient(cfg),
		User:            NewUserClient(cfg),
		UserPaymentPlan: NewUserPaymentPlanClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DeviceDetails:   NewDeviceDetailsClient(cfg),
		DeviceIot:       NewDeviceIotClient(cfg),
		MainIot:         NewMainIotClient(cfg),
		Payment:         NewPaymentClient(cfg),
		Plan:            NewPlanClient(cfg),
		Role:            NewRoleClient(cfg),
		User:            NewUserClient(cfg),
		UserPaymentPlan: NewUserPaymentPlanClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DeviceDetails.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.DeviceDetails, c.DeviceIot, c.MainIot, c.Payment, c.Plan, c.Role, c.User,
		c.UserPaymentPlan,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.DeviceDetails, c.DeviceIot, c.MainIot, c.Payment, c.Plan, c.Role, c.User,
		c.UserPaymentPlan,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DeviceDetailsMutation:
		return c.DeviceDetails.mutate(ctx, m)
	case *DeviceIotMutation:
		return c.DeviceIot.mutate(ctx, m)
	case *MainIotMutation:
		return c.MainIot.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPaymentPlanMutation:
		return c.UserPaymentPlan.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DeviceDetailsClient is a client for the DeviceDetails schema.
type DeviceDetailsClient struct {
	config
}

// NewDeviceDetailsClient returns a client for the DeviceDetails from the given config.
func NewDeviceDetailsClient(c config) *DeviceDetailsClient {
	return &DeviceDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `devicedetails.Hooks(f(g(h())))`.
func (c *DeviceDetailsClient) Use(hooks ...Hook) {
	c.hooks.DeviceDetails = append(c.hooks.DeviceDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `devicedetails.Intercept(f(g(h())))`.
func (c *DeviceDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceDetails = append(c.inters.DeviceDetails, interceptors...)
}

// Create returns a builder for creating a DeviceDetails entity.
func (c *DeviceDetailsClient) Create() *DeviceDetailsCreate {
	mutation := newDeviceDetailsMutation(c.config, OpCreate)
	return &DeviceDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceDetails entities.
func (c *DeviceDetailsClient) CreateBulk(builders ...*DeviceDetailsCreate) *DeviceDetailsCreateBulk {
	return &DeviceDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceDetailsClient) MapCreateBulk(slice any, setFunc func(*DeviceDetailsCreate, int)) *DeviceDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceDetailsCreateBulk{err: fmt.Errorf("calling to DeviceDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceDetails.
func (c *DeviceDetailsClient) Update() *DeviceDetailsUpdate {
	mutation := newDeviceDetailsMutation(c.config, OpUpdate)
	return &DeviceDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceDetailsClient) UpdateOne(dd *DeviceDetails) *DeviceDetailsUpdateOne {
	mutation := newDeviceDetailsMutation(c.config, OpUpdateOne, withDeviceDetails(dd))
	return &DeviceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceDetailsClient) UpdateOneID(id int) *DeviceDetailsUpdateOne {
	mutation := newDeviceDetailsMutation(c.config, OpUpdateOne, withDeviceDetailsID(id))
	return &DeviceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceDetails.
func (c *DeviceDetailsClient) Delete() *DeviceDetailsDelete {
	mutation := newDeviceDetailsMutation(c.config, OpDelete)
	return &DeviceDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceDetailsClient) DeleteOne(dd *DeviceDetails) *DeviceDetailsDeleteOne {
	return c.DeleteOneID(dd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceDetailsClient) DeleteOneID(id int) *DeviceDetailsDeleteOne {
	builder := c.Delete().Where(devicedetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDetailsDeleteOne{builder}
}

// Query returns a query builder for DeviceDetails.
func (c *DeviceDetailsClient) Query() *DeviceDetailsQuery {
	return &DeviceDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceDetails entity by its id.
func (c *DeviceDetailsClient) Get(ctx context.Context, id int) (*DeviceDetails, error) {
	return c.Query().Where(devicedetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceDetailsClient) GetX(ctx context.Context, id int) *DeviceDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeviceiotID queries the deviceiot_id edge of a DeviceDetails.
func (c *DeviceDetailsClient) QueryDeviceiotID(dd *DeviceDetails) *DeviceIotQuery {
	query := (&DeviceIotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(devicedetails.Table, devicedetails.FieldID, id),
			sqlgraph.To(deviceiot.Table, deviceiot.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, devicedetails.DeviceiotIDTable, devicedetails.DeviceiotIDColumn),
		)
		fromV = sqlgraph.Neighbors(dd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceDetailsClient) Hooks() []Hook {
	return c.hooks.DeviceDetails
}

// Interceptors returns the client interceptors.
func (c *DeviceDetailsClient) Interceptors() []Interceptor {
	return c.inters.DeviceDetails
}

func (c *DeviceDetailsClient) mutate(ctx context.Context, m *DeviceDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeviceDetails mutation op: %q", m.Op())
	}
}

// DeviceIotClient is a client for the DeviceIot schema.
type DeviceIotClient struct {
	config
}

// NewDeviceIotClient returns a client for the DeviceIot from the given config.
func NewDeviceIotClient(c config) *DeviceIotClient {
	return &DeviceIotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deviceiot.Hooks(f(g(h())))`.
func (c *DeviceIotClient) Use(hooks ...Hook) {
	c.hooks.DeviceIot = append(c.hooks.DeviceIot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deviceiot.Intercept(f(g(h())))`.
func (c *DeviceIotClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeviceIot = append(c.inters.DeviceIot, interceptors...)
}

// Create returns a builder for creating a DeviceIot entity.
func (c *DeviceIotClient) Create() *DeviceIotCreate {
	mutation := newDeviceIotMutation(c.config, OpCreate)
	return &DeviceIotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeviceIot entities.
func (c *DeviceIotClient) CreateBulk(builders ...*DeviceIotCreate) *DeviceIotCreateBulk {
	return &DeviceIotCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceIotClient) MapCreateBulk(slice any, setFunc func(*DeviceIotCreate, int)) *DeviceIotCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceIotCreateBulk{err: fmt.Errorf("calling to DeviceIotClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceIotCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceIotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeviceIot.
func (c *DeviceIotClient) Update() *DeviceIotUpdate {
	mutation := newDeviceIotMutation(c.config, OpUpdate)
	return &DeviceIotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceIotClient) UpdateOne(di *DeviceIot) *DeviceIotUpdateOne {
	mutation := newDeviceIotMutation(c.config, OpUpdateOne, withDeviceIot(di))
	return &DeviceIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceIotClient) UpdateOneID(id int64) *DeviceIotUpdateOne {
	mutation := newDeviceIotMutation(c.config, OpUpdateOne, withDeviceIotID(id))
	return &DeviceIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeviceIot.
func (c *DeviceIotClient) Delete() *DeviceIotDelete {
	mutation := newDeviceIotMutation(c.config, OpDelete)
	return &DeviceIotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceIotClient) DeleteOne(di *DeviceIot) *DeviceIotDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceIotClient) DeleteOneID(id int64) *DeviceIotDeleteOne {
	builder := c.Delete().Where(deviceiot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceIotDeleteOne{builder}
}

// Query returns a query builder for DeviceIot.
func (c *DeviceIotClient) Query() *DeviceIotQuery {
	return &DeviceIotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeviceIot},
		inters: c.Interceptors(),
	}
}

// Get returns a DeviceIot entity by its id.
func (c *DeviceIotClient) Get(ctx context.Context, id int64) (*DeviceIot, error) {
	return c.Query().Where(deviceiot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceIotClient) GetX(ctx context.Context, id int64) *DeviceIot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMainiotID queries the mainiot_id edge of a DeviceIot.
func (c *DeviceIotClient) QueryMainiotID(di *DeviceIot) *MainIotQuery {
	query := (&MainIotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceiot.Table, deviceiot.FieldID, id),
			sqlgraph.To(mainiot.Table, mainiot.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deviceiot.MainiotIDTable, deviceiot.MainiotIDColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevicedetails queries the devicedetails edge of a DeviceIot.
func (c *DeviceIotClient) QueryDevicedetails(di *DeviceIot) *DeviceDetailsQuery {
	query := (&DeviceDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deviceiot.Table, deviceiot.FieldID, id),
			sqlgraph.To(devicedetails.Table, devicedetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deviceiot.DevicedetailsTable, deviceiot.DevicedetailsColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceIotClient) Hooks() []Hook {
	return c.hooks.DeviceIot
}

// Interceptors returns the client interceptors.
func (c *DeviceIotClient) Interceptors() []Interceptor {
	return c.inters.DeviceIot
}

func (c *DeviceIotClient) mutate(ctx context.Context, m *DeviceIotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceIotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceIotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceIotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeviceIot mutation op: %q", m.Op())
	}
}

// MainIotClient is a client for the MainIot schema.
type MainIotClient struct {
	config
}

// NewMainIotClient returns a client for the MainIot from the given config.
func NewMainIotClient(c config) *MainIotClient {
	return &MainIotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mainiot.Hooks(f(g(h())))`.
func (c *MainIotClient) Use(hooks ...Hook) {
	c.hooks.MainIot = append(c.hooks.MainIot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mainiot.Intercept(f(g(h())))`.
func (c *MainIotClient) Intercept(interceptors ...Interceptor) {
	c.inters.MainIot = append(c.inters.MainIot, interceptors...)
}

// Create returns a builder for creating a MainIot entity.
func (c *MainIotClient) Create() *MainIotCreate {
	mutation := newMainIotMutation(c.config, OpCreate)
	return &MainIotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MainIot entities.
func (c *MainIotClient) CreateBulk(builders ...*MainIotCreate) *MainIotCreateBulk {
	return &MainIotCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MainIotClient) MapCreateBulk(slice any, setFunc func(*MainIotCreate, int)) *MainIotCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MainIotCreateBulk{err: fmt.Errorf("calling to MainIotClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MainIotCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MainIotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MainIot.
func (c *MainIotClient) Update() *MainIotUpdate {
	mutation := newMainIotMutation(c.config, OpUpdate)
	return &MainIotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MainIotClient) UpdateOne(mi *MainIot) *MainIotUpdateOne {
	mutation := newMainIotMutation(c.config, OpUpdateOne, withMainIot(mi))
	return &MainIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MainIotClient) UpdateOneID(id int64) *MainIotUpdateOne {
	mutation := newMainIotMutation(c.config, OpUpdateOne, withMainIotID(id))
	return &MainIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MainIot.
func (c *MainIotClient) Delete() *MainIotDelete {
	mutation := newMainIotMutation(c.config, OpDelete)
	return &MainIotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MainIotClient) DeleteOne(mi *MainIot) *MainIotDeleteOne {
	return c.DeleteOneID(mi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MainIotClient) DeleteOneID(id int64) *MainIotDeleteOne {
	builder := c.Delete().Where(mainiot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MainIotDeleteOne{builder}
}

// Query returns a query builder for MainIot.
func (c *MainIotClient) Query() *MainIotQuery {
	return &MainIotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMainIot},
		inters: c.Interceptors(),
	}
}

// Get returns a MainIot entity by its id.
func (c *MainIotClient) Get(ctx context.Context, id int64) (*MainIot, error) {
	return c.Query().Where(mainiot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MainIotClient) GetX(ctx context.Context, id int64) *MainIot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeviceiots queries the deviceiots edge of a MainIot.
func (c *MainIotClient) QueryDeviceiots(mi *MainIot) *DeviceIotQuery {
	query := (&DeviceIotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mainiot.Table, mainiot.FieldID, id),
			sqlgraph.To(deviceiot.Table, deviceiot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mainiot.DeviceiotsTable, mainiot.DeviceiotsColumn),
		)
		fromV = sqlgraph.Neighbors(mi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserID queries the user_id edge of a MainIot.
func (c *MainIotClient) QueryUserID(mi *MainIot) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mainiot.Table, mainiot.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mainiot.UserIDTable, mainiot.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(mi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MainIotClient) Hooks() []Hook {
	return c.hooks.MainIot
}

// Interceptors returns the client interceptors.
func (c *MainIotClient) Interceptors() []Interceptor {
	return c.inters.MainIot
}

func (c *MainIotClient) mutate(ctx context.Context, m *MainIotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MainIotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MainIotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MainIotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MainIotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MainIot mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int64) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id int64) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int64) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int64) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanClient) MapCreateBulk(slice any, setFunc func(*PlanCreate, int)) *PlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanCreateBulk{err: fmt.Errorf("calling to PlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id int) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id int) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id int) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id int) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserpaymentplans queries the userpaymentplans edge of a Plan.
func (c *PlanClient) QueryUserpaymentplans(pl *Plan) *UserPaymentPlanQuery {
	query := (&UserPaymentPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(userpaymentplan.Table, userpaymentplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.UserpaymentplansTable, plan.UserpaymentplansColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	return c.hooks.Plan
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Plan mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int16) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int16) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int16) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int16) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Role.
func (c *RoleClient) QueryUsers(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.UsersTable, role.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainiots queries the mainiots edge of a User.
func (c *UserClient) QueryMainiots(u *User) *MainIotQuery {
	query := (&MainIotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mainiot.Table, mainiot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MainiotsTable, user.MainiotsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserpaymentplans queries the userpaymentplans edge of a User.
func (c *UserClient) QueryUserpaymentplans(u *User) *UserPaymentPlanQuery {
	query := (&UserPaymentPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpaymentplan.Table, userpaymentplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserpaymentplansTable, user.UserpaymentplansColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPaymentPlanClient is a client for the UserPaymentPlan schema.
type UserPaymentPlanClient struct {
	config
}

// NewUserPaymentPlanClient returns a client for the UserPaymentPlan from the given config.
func NewUserPaymentPlanClient(c config) *UserPaymentPlanClient {
	return &UserPaymentPlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpaymentplan.Hooks(f(g(h())))`.
func (c *UserPaymentPlanClient) Use(hooks ...Hook) {
	c.hooks.UserPaymentPlan = append(c.hooks.UserPaymentPlan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpaymentplan.Intercept(f(g(h())))`.
func (c *UserPaymentPlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPaymentPlan = append(c.inters.UserPaymentPlan, interceptors...)
}

// Create returns a builder for creating a UserPaymentPlan entity.
func (c *UserPaymentPlanClient) Create() *UserPaymentPlanCreate {
	mutation := newUserPaymentPlanMutation(c.config, OpCreate)
	return &UserPaymentPlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPaymentPlan entities.
func (c *UserPaymentPlanClient) CreateBulk(builders ...*UserPaymentPlanCreate) *UserPaymentPlanCreateBulk {
	return &UserPaymentPlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPaymentPlanClient) MapCreateBulk(slice any, setFunc func(*UserPaymentPlanCreate, int)) *UserPaymentPlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPaymentPlanCreateBulk{err: fmt.Errorf("calling to UserPaymentPlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPaymentPlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPaymentPlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPaymentPlan.
func (c *UserPaymentPlanClient) Update() *UserPaymentPlanUpdate {
	mutation := newUserPaymentPlanMutation(c.config, OpUpdate)
	return &UserPaymentPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPaymentPlanClient) UpdateOne(upp *UserPaymentPlan) *UserPaymentPlanUpdateOne {
	mutation := newUserPaymentPlanMutation(c.config, OpUpdateOne, withUserPaymentPlan(upp))
	return &UserPaymentPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPaymentPlanClient) UpdateOneID(id int64) *UserPaymentPlanUpdateOne {
	mutation := newUserPaymentPlanMutation(c.config, OpUpdateOne, withUserPaymentPlanID(id))
	return &UserPaymentPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPaymentPlan.
func (c *UserPaymentPlanClient) Delete() *UserPaymentPlanDelete {
	mutation := newUserPaymentPlanMutation(c.config, OpDelete)
	return &UserPaymentPlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPaymentPlanClient) DeleteOne(upp *UserPaymentPlan) *UserPaymentPlanDeleteOne {
	return c.DeleteOneID(upp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPaymentPlanClient) DeleteOneID(id int64) *UserPaymentPlanDeleteOne {
	builder := c.Delete().Where(userpaymentplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPaymentPlanDeleteOne{builder}
}

// Query returns a query builder for UserPaymentPlan.
func (c *UserPaymentPlanClient) Query() *UserPaymentPlanQuery {
	return &UserPaymentPlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPaymentPlan},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPaymentPlan entity by its id.
func (c *UserPaymentPlanClient) Get(ctx context.Context, id int64) (*UserPaymentPlan, error) {
	return c.Query().Where(userpaymentplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPaymentPlanClient) GetX(ctx context.Context, id int64) *UserPaymentPlan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserID queries the user_id edge of a UserPaymentPlan.
func (c *UserPaymentPlanClient) QueryUserID(upp *UserPaymentPlan) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpaymentplan.Table, userpaymentplan.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpaymentplan.UserIDTable, userpaymentplan.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(upp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanID queries the plan_id edge of a UserPaymentPlan.
func (c *UserPaymentPlanClient) QueryPlanID(upp *UserPaymentPlan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpaymentplan.Table, userpaymentplan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpaymentplan.PlanIDTable, userpaymentplan.PlanIDColumn),
		)
		fromV = sqlgraph.Neighbors(upp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPaymentPlanClient) Hooks() []Hook {
	return c.hooks.UserPaymentPlan
}

// Interceptors returns the client interceptors.
func (c *UserPaymentPlanClient) Interceptors() []Interceptor {
	return c.inters.UserPaymentPlan
}

func (c *UserPaymentPlanClient) mutate(ctx context.Context, m *UserPaymentPlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPaymentPlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPaymentPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPaymentPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPaymentPlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPaymentPlan mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DeviceDetails, DeviceIot, MainIot, Payment, Plan, Role, User,
		UserPaymentPlan []ent.Hook
	}
	inters struct {
		DeviceDetails, DeviceIot, MainIot, Payment, Plan, Role, User,
		UserPaymentPlan []ent.Interceptor
	}
)
