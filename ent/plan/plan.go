// Code generated by ent, DO NOT EDIT.

package plan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeUserpaymentplans holds the string denoting the userpaymentplans edge name in mutations.
	EdgeUserpaymentplans = "userpaymentplans"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// UserpaymentplansTable is the table that holds the userpaymentplans relation/edge.
	UserpaymentplansTable = "user_payment_plans"
	// UserpaymentplansInverseTable is the table name for the UserPaymentPlan entity.
	// It exists in this package in order to avoid circular dependency with the "userpaymentplan" package.
	UserpaymentplansInverseTable = "user_payment_plans"
	// UserpaymentplansColumn is the table column denoting the userpaymentplans relation/edge.
	UserpaymentplansColumn = "plan_userpaymentplans"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldPeriod,
	FieldActive,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUserpaymentplansCount orders the results by userpaymentplans count.
func ByUserpaymentplansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserpaymentplansStep(), opts...)
	}
}

// ByUserpaymentplans orders the results by userpaymentplans terms.
func ByUserpaymentplans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserpaymentplansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserpaymentplansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserpaymentplansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserpaymentplansTable, UserpaymentplansColumn),
	)
}
