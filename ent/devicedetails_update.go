// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/devicedetails"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceDetailsUpdate is the builder for updating DeviceDetails entities.
type DeviceDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceDetailsMutation
}

// Where appends a list predicates to the DeviceDetailsUpdate builder.
func (ddu *DeviceDetailsUpdate) Where(ps ...predicate.DeviceDetails) *DeviceDetailsUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetLightStatus sets the "light_status" field.
func (ddu *DeviceDetailsUpdate) SetLightStatus(b bool) *DeviceDetailsUpdate {
	ddu.mutation.SetLightStatus(b)
	return ddu
}

// SetNillableLightStatus sets the "light_status" field if the given value is not nil.
func (ddu *DeviceDetailsUpdate) SetNillableLightStatus(b *bool) *DeviceDetailsUpdate {
	if b != nil {
		ddu.SetLightStatus(*b)
	}
	return ddu
}

// ClearLightStatus clears the value of the "light_status" field.
func (ddu *DeviceDetailsUpdate) ClearLightStatus() *DeviceDetailsUpdate {
	ddu.mutation.ClearLightStatus()
	return ddu
}

// SetDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by Id.
func (ddu *DeviceDetailsUpdate) SetDeviceiotIDID(id int64) *DeviceDetailsUpdate {
	ddu.mutation.SetDeviceiotIDID(id)
	return ddu
}

// SetNillableDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by Id if the given value is not nil.
func (ddu *DeviceDetailsUpdate) SetNillableDeviceiotIDID(id *int64) *DeviceDetailsUpdate {
	if id != nil {
		ddu = ddu.SetDeviceiotIDID(*id)
	}
	return ddu
}

// SetDeviceiotID sets the "deviceiot_id" edge to the DeviceIot entity.
func (ddu *DeviceDetailsUpdate) SetDeviceiotID(d *DeviceIot) *DeviceDetailsUpdate {
	return ddu.SetDeviceiotIDID(d.ID)
}

// Mutation returns the DeviceDetailsMutation object of the builder.
func (ddu *DeviceDetailsUpdate) Mutation() *DeviceDetailsMutation {
	return ddu.mutation
}

// ClearDeviceiotID clears the "deviceiot_id" edge to the DeviceIot entity.
func (ddu *DeviceDetailsUpdate) ClearDeviceiotID() *DeviceDetailsUpdate {
	ddu.mutation.ClearDeviceiotID()
	return ddu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DeviceDetailsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ddu.sqlSave, ddu.mutation, ddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DeviceDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DeviceDetailsUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DeviceDetailsUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ddu *DeviceDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicedetails.Table, devicedetails.Columns, sqlgraph.NewFieldSpec(devicedetails.FieldID, field.TypeInt))
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.LightStatus(); ok {
		_spec.SetField(devicedetails.FieldLightStatus, field.TypeBool, value)
	}
	if ddu.mutation.LightStatusCleared() {
		_spec.ClearField(devicedetails.FieldLightStatus, field.TypeBool)
	}
	if ddu.mutation.DeviceiotIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicedetails.DeviceiotIDTable,
			Columns: []string{devicedetails.DeviceiotIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ddu.mutation.DeviceiotIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicedetails.DeviceiotIDTable,
			Columns: []string{devicedetails.DeviceiotIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicedetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ddu.mutation.done = true
	return n, nil
}

// DeviceDetailsUpdateOne is the builder for updating a single DeviceDetails entity.
type DeviceDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceDetailsMutation
}

// SetLightStatus sets the "light_status" field.
func (dduo *DeviceDetailsUpdateOne) SetLightStatus(b bool) *DeviceDetailsUpdateOne {
	dduo.mutation.SetLightStatus(b)
	return dduo
}

// SetNillableLightStatus sets the "light_status" field if the given value is not nil.
func (dduo *DeviceDetailsUpdateOne) SetNillableLightStatus(b *bool) *DeviceDetailsUpdateOne {
	if b != nil {
		dduo.SetLightStatus(*b)
	}
	return dduo
}

// ClearLightStatus clears the value of the "light_status" field.
func (dduo *DeviceDetailsUpdateOne) ClearLightStatus() *DeviceDetailsUpdateOne {
	dduo.mutation.ClearLightStatus()
	return dduo
}

// SetDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by Id.
func (dduo *DeviceDetailsUpdateOne) SetDeviceiotIDID(id int64) *DeviceDetailsUpdateOne {
	dduo.mutation.SetDeviceiotIDID(id)
	return dduo
}

// SetNillableDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by Id if the given value is not nil.
func (dduo *DeviceDetailsUpdateOne) SetNillableDeviceiotIDID(id *int64) *DeviceDetailsUpdateOne {
	if id != nil {
		dduo = dduo.SetDeviceiotIDID(*id)
	}
	return dduo
}

// SetDeviceiotID sets the "deviceiot_id" edge to the DeviceIot entity.
func (dduo *DeviceDetailsUpdateOne) SetDeviceiotID(d *DeviceIot) *DeviceDetailsUpdateOne {
	return dduo.SetDeviceiotIDID(d.ID)
}

// Mutation returns the DeviceDetailsMutation object of the builder.
func (dduo *DeviceDetailsUpdateOne) Mutation() *DeviceDetailsMutation {
	return dduo.mutation
}

// ClearDeviceiotID clears the "deviceiot_id" edge to the DeviceIot entity.
func (dduo *DeviceDetailsUpdateOne) ClearDeviceiotID() *DeviceDetailsUpdateOne {
	dduo.mutation.ClearDeviceiotID()
	return dduo
}

// Where appends a list predicates to the DeviceDetailsUpdate builder.
func (dduo *DeviceDetailsUpdateOne) Where(ps ...predicate.DeviceDetails) *DeviceDetailsUpdateOne {
	dduo.mutation.Where(ps...)
	return dduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DeviceDetailsUpdateOne) Select(field string, fields ...string) *DeviceDetailsUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DeviceDetails entity.
func (dduo *DeviceDetailsUpdateOne) Save(ctx context.Context) (*DeviceDetails, error) {
	return withHooks(ctx, dduo.sqlSave, dduo.mutation, dduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DeviceDetailsUpdateOne) SaveX(ctx context.Context) *DeviceDetails {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DeviceDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DeviceDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dduo *DeviceDetailsUpdateOne) sqlSave(ctx context.Context) (_node *DeviceDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(devicedetails.Table, devicedetails.Columns, sqlgraph.NewFieldSpec(devicedetails.FieldID, field.TypeInt))
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicedetails.FieldID)
		for _, f := range fields {
			if !devicedetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicedetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.LightStatus(); ok {
		_spec.SetField(devicedetails.FieldLightStatus, field.TypeBool, value)
	}
	if dduo.mutation.LightStatusCleared() {
		_spec.ClearField(devicedetails.FieldLightStatus, field.TypeBool)
	}
	if dduo.mutation.DeviceiotIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicedetails.DeviceiotIDTable,
			Columns: []string{devicedetails.DeviceiotIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dduo.mutation.DeviceiotIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicedetails.DeviceiotIDTable,
			Columns: []string{devicedetails.DeviceiotIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeviceDetails{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicedetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dduo.mutation.done = true
	return _node, nil
}
