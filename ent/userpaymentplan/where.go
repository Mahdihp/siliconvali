// Code generated by ent, DO NOT EDIT.

package userpaymentplan

import (
	"siliconvali/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldAmount, v))
}

// ReferenceNumber applies equality check predicate on the "reference_number" field. It's identical to ReferenceNumberEQ.
func ReferenceNumber(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldReferenceNumber, v))
}

// TransactionNumber applies equality check predicate on the "transaction_number" field. It's identical to TransactionNumberEQ.
func TransactionNumber(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldTransactionNumber, v))
}

// SourceAccountNumber applies equality check predicate on the "source_account_number" field. It's identical to SourceAccountNumberEQ.
func SourceAccountNumber(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldSourceAccountNumber, v))
}

// DestinationAccountNumber applies equality check predicate on the "destination_account_number" field. It's identical to DestinationAccountNumberEQ.
func DestinationAccountNumber(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldDestinationAccountNumber, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldDeleted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldCreatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotNull(FieldAmount))
}

// ReferenceNumberEQ applies the EQ predicate on the "reference_number" field.
func ReferenceNumberEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldReferenceNumber, v))
}

// ReferenceNumberNEQ applies the NEQ predicate on the "reference_number" field.
func ReferenceNumberNEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldReferenceNumber, v))
}

// ReferenceNumberIn applies the In predicate on the "reference_number" field.
func ReferenceNumberIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberNotIn applies the NotIn predicate on the "reference_number" field.
func ReferenceNumberNotIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldReferenceNumber, vs...))
}

// ReferenceNumberGT applies the GT predicate on the "reference_number" field.
func ReferenceNumberGT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldReferenceNumber, v))
}

// ReferenceNumberGTE applies the GTE predicate on the "reference_number" field.
func ReferenceNumberGTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldReferenceNumber, v))
}

// ReferenceNumberLT applies the LT predicate on the "reference_number" field.
func ReferenceNumberLT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldReferenceNumber, v))
}

// ReferenceNumberLTE applies the LTE predicate on the "reference_number" field.
func ReferenceNumberLTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldReferenceNumber, v))
}

// ReferenceNumberContains applies the Contains predicate on the "reference_number" field.
func ReferenceNumberContains(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContains(FieldReferenceNumber, v))
}

// ReferenceNumberHasPrefix applies the HasPrefix predicate on the "reference_number" field.
func ReferenceNumberHasPrefix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasPrefix(FieldReferenceNumber, v))
}

// ReferenceNumberHasSuffix applies the HasSuffix predicate on the "reference_number" field.
func ReferenceNumberHasSuffix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasSuffix(FieldReferenceNumber, v))
}

// ReferenceNumberEqualFold applies the EqualFold predicate on the "reference_number" field.
func ReferenceNumberEqualFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEqualFold(FieldReferenceNumber, v))
}

// ReferenceNumberContainsFold applies the ContainsFold predicate on the "reference_number" field.
func ReferenceNumberContainsFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContainsFold(FieldReferenceNumber, v))
}

// TransactionNumberEQ applies the EQ predicate on the "transaction_number" field.
func TransactionNumberEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldTransactionNumber, v))
}

// TransactionNumberNEQ applies the NEQ predicate on the "transaction_number" field.
func TransactionNumberNEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldTransactionNumber, v))
}

// TransactionNumberIn applies the In predicate on the "transaction_number" field.
func TransactionNumberIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldTransactionNumber, vs...))
}

// TransactionNumberNotIn applies the NotIn predicate on the "transaction_number" field.
func TransactionNumberNotIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldTransactionNumber, vs...))
}

// TransactionNumberGT applies the GT predicate on the "transaction_number" field.
func TransactionNumberGT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldTransactionNumber, v))
}

// TransactionNumberGTE applies the GTE predicate on the "transaction_number" field.
func TransactionNumberGTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldTransactionNumber, v))
}

// TransactionNumberLT applies the LT predicate on the "transaction_number" field.
func TransactionNumberLT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldTransactionNumber, v))
}

// TransactionNumberLTE applies the LTE predicate on the "transaction_number" field.
func TransactionNumberLTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldTransactionNumber, v))
}

// TransactionNumberContains applies the Contains predicate on the "transaction_number" field.
func TransactionNumberContains(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContains(FieldTransactionNumber, v))
}

// TransactionNumberHasPrefix applies the HasPrefix predicate on the "transaction_number" field.
func TransactionNumberHasPrefix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasPrefix(FieldTransactionNumber, v))
}

// TransactionNumberHasSuffix applies the HasSuffix predicate on the "transaction_number" field.
func TransactionNumberHasSuffix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasSuffix(FieldTransactionNumber, v))
}

// TransactionNumberIsNil applies the IsNil predicate on the "transaction_number" field.
func TransactionNumberIsNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIsNull(FieldTransactionNumber))
}

// TransactionNumberNotNil applies the NotNil predicate on the "transaction_number" field.
func TransactionNumberNotNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotNull(FieldTransactionNumber))
}

// TransactionNumberEqualFold applies the EqualFold predicate on the "transaction_number" field.
func TransactionNumberEqualFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEqualFold(FieldTransactionNumber, v))
}

// TransactionNumberContainsFold applies the ContainsFold predicate on the "transaction_number" field.
func TransactionNumberContainsFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContainsFold(FieldTransactionNumber, v))
}

// SourceAccountNumberEQ applies the EQ predicate on the "source_account_number" field.
func SourceAccountNumberEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldSourceAccountNumber, v))
}

// SourceAccountNumberNEQ applies the NEQ predicate on the "source_account_number" field.
func SourceAccountNumberNEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldSourceAccountNumber, v))
}

// SourceAccountNumberIn applies the In predicate on the "source_account_number" field.
func SourceAccountNumberIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldSourceAccountNumber, vs...))
}

// SourceAccountNumberNotIn applies the NotIn predicate on the "source_account_number" field.
func SourceAccountNumberNotIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldSourceAccountNumber, vs...))
}

// SourceAccountNumberGT applies the GT predicate on the "source_account_number" field.
func SourceAccountNumberGT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldSourceAccountNumber, v))
}

// SourceAccountNumberGTE applies the GTE predicate on the "source_account_number" field.
func SourceAccountNumberGTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldSourceAccountNumber, v))
}

// SourceAccountNumberLT applies the LT predicate on the "source_account_number" field.
func SourceAccountNumberLT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldSourceAccountNumber, v))
}

// SourceAccountNumberLTE applies the LTE predicate on the "source_account_number" field.
func SourceAccountNumberLTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldSourceAccountNumber, v))
}

// SourceAccountNumberContains applies the Contains predicate on the "source_account_number" field.
func SourceAccountNumberContains(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContains(FieldSourceAccountNumber, v))
}

// SourceAccountNumberHasPrefix applies the HasPrefix predicate on the "source_account_number" field.
func SourceAccountNumberHasPrefix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasPrefix(FieldSourceAccountNumber, v))
}

// SourceAccountNumberHasSuffix applies the HasSuffix predicate on the "source_account_number" field.
func SourceAccountNumberHasSuffix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasSuffix(FieldSourceAccountNumber, v))
}

// SourceAccountNumberIsNil applies the IsNil predicate on the "source_account_number" field.
func SourceAccountNumberIsNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIsNull(FieldSourceAccountNumber))
}

// SourceAccountNumberNotNil applies the NotNil predicate on the "source_account_number" field.
func SourceAccountNumberNotNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotNull(FieldSourceAccountNumber))
}

// SourceAccountNumberEqualFold applies the EqualFold predicate on the "source_account_number" field.
func SourceAccountNumberEqualFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEqualFold(FieldSourceAccountNumber, v))
}

// SourceAccountNumberContainsFold applies the ContainsFold predicate on the "source_account_number" field.
func SourceAccountNumberContainsFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContainsFold(FieldSourceAccountNumber, v))
}

// DestinationAccountNumberEQ applies the EQ predicate on the "destination_account_number" field.
func DestinationAccountNumberEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberNEQ applies the NEQ predicate on the "destination_account_number" field.
func DestinationAccountNumberNEQ(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberIn applies the In predicate on the "destination_account_number" field.
func DestinationAccountNumberIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldDestinationAccountNumber, vs...))
}

// DestinationAccountNumberNotIn applies the NotIn predicate on the "destination_account_number" field.
func DestinationAccountNumberNotIn(vs ...string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldDestinationAccountNumber, vs...))
}

// DestinationAccountNumberGT applies the GT predicate on the "destination_account_number" field.
func DestinationAccountNumberGT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberGTE applies the GTE predicate on the "destination_account_number" field.
func DestinationAccountNumberGTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberLT applies the LT predicate on the "destination_account_number" field.
func DestinationAccountNumberLT(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberLTE applies the LTE predicate on the "destination_account_number" field.
func DestinationAccountNumberLTE(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberContains applies the Contains predicate on the "destination_account_number" field.
func DestinationAccountNumberContains(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContains(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberHasPrefix applies the HasPrefix predicate on the "destination_account_number" field.
func DestinationAccountNumberHasPrefix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasPrefix(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberHasSuffix applies the HasSuffix predicate on the "destination_account_number" field.
func DestinationAccountNumberHasSuffix(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldHasSuffix(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberIsNil applies the IsNil predicate on the "destination_account_number" field.
func DestinationAccountNumberIsNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIsNull(FieldDestinationAccountNumber))
}

// DestinationAccountNumberNotNil applies the NotNil predicate on the "destination_account_number" field.
func DestinationAccountNumberNotNil() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotNull(FieldDestinationAccountNumber))
}

// DestinationAccountNumberEqualFold applies the EqualFold predicate on the "destination_account_number" field.
func DestinationAccountNumberEqualFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEqualFold(FieldDestinationAccountNumber, v))
}

// DestinationAccountNumberContainsFold applies the ContainsFold predicate on the "destination_account_number" field.
func DestinationAccountNumberContainsFold(v string) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldContainsFold(FieldDestinationAccountNumber, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldDeleted, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUserID applies the HasEdge predicate on the "user_id" edge.
func HasUserID() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDWith applies the HasEdge predicate on the "user_id" edge with a given conditions (other predicates).
func HasUserIDWith(preds ...predicate.User) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(func(s *sql.Selector) {
		step := newUserIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlanID applies the HasEdge predicate on the "plan_id" edge.
func HasPlanID() predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlanIDTable, PlanIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanIDWith applies the HasEdge predicate on the "plan_id" edge with a given conditions (other predicates).
func HasPlanIDWith(preds ...predicate.Plan) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(func(s *sql.Selector) {
		step := newPlanIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPaymentPlan) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPaymentPlan) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPaymentPlan) predicate.UserPaymentPlan {
	return predicate.UserPaymentPlan(sql.NotPredicates(p))
}
