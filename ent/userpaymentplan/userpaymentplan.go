// Code generated by ent, DO NOT EDIT.

package userpaymentplan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userpaymentplan type in the database.
	Label = "user_payment_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldReferenceNumber holds the string denoting the reference_number field in the database.
	FieldReferenceNumber = "reference_number"
	// FieldTransactionNumber holds the string denoting the transaction_number field in the database.
	FieldTransactionNumber = "transaction_number"
	// FieldSourceAccountNumber holds the string denoting the source_account_number field in the database.
	FieldSourceAccountNumber = "source_account_number"
	// FieldDestinationAccountNumber holds the string denoting the destination_account_number field in the database.
	FieldDestinationAccountNumber = "destination_account_number"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUserID holds the string denoting the user_id edge name in mutations.
	EdgeUserID = "user_id"
	// EdgePlanID holds the string denoting the plan_id edge name in mutations.
	EdgePlanID = "plan_id"
	// Table holds the table name of the userpaymentplan in the database.
	Table = "user_payment_plans"
	// UserIDTable is the table that holds the user_id relation/edge.
	UserIDTable = "user_payment_plans"
	// UserIDInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDInverseTable = "users"
	// UserIDColumn is the table column denoting the user_id relation/edge.
	UserIDColumn = "user_userpaymentplans"
	// PlanIDTable is the table that holds the plan_id relation/edge.
	PlanIDTable = "user_payment_plans"
	// PlanIDInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanIDInverseTable = "plans"
	// PlanIDColumn is the table column denoting the plan_id relation/edge.
	PlanIDColumn = "plan_userpaymentplans"
)

// Columns holds all SQL columns for userpaymentplan fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldReferenceNumber,
	FieldTransactionNumber,
	FieldSourceAccountNumber,
	FieldDestinationAccountNumber,
	FieldDeleted,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_payment_plans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_userpaymentplans",
	"user_userpaymentplans",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the UserPaymentPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByReferenceNumber orders the results by the reference_number field.
func ByReferenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceNumber, opts...).ToFunc()
}

// ByTransactionNumber orders the results by the transaction_number field.
func ByTransactionNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionNumber, opts...).ToFunc()
}

// BySourceAccountNumber orders the results by the source_account_number field.
func BySourceAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceAccountNumber, opts...).ToFunc()
}

// ByDestinationAccountNumber orders the results by the destination_account_number field.
func ByDestinationAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationAccountNumber, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserIDField orders the results by user_id field.
func ByUserIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanIDField orders the results by plan_id field.
func ByPlanIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanIDStep(), sql.OrderByField(field, opts...))
	}
}
func newUserIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
	)
}
func newPlanIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanIDTable, PlanIDColumn),
	)
}
