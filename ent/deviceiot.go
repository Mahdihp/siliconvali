// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeviceIot is the model entity for the DeviceIot schema.
type DeviceIot struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber *string `json:"serial_number,omitempty"`
	// TypeDevice holds the value of the "type_device" field.
	TypeDevice *int `json:"type_device,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceIotQuery when eager-loading is set.
	Edges               DeviceIotEdges `json:"edges"`
	main_iot_deviceiots *int64
	selectValues        sql.SelectValues
}

// DeviceIotEdges holds the relations/edges for other nodes in the graph.
type DeviceIotEdges struct {
	// Owner holds the value of the owner edge.
	Owner *MainIot `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeviceIotEdges) OwnerOrErr() (*MainIot, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mainiot.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeviceIot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deviceiot.FieldID, deviceiot.FieldTypeDevice:
			values[i] = new(sql.NullInt64)
		case deviceiot.FieldDisplayName, deviceiot.FieldSerialNumber:
			values[i] = new(sql.NullString)
		case deviceiot.FieldCreatedAt, deviceiot.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case deviceiot.ForeignKeys[0]: // main_iot_deviceiots
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeviceIot fields.
func (di *DeviceIot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deviceiot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int64(value.Int64)
		case deviceiot.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				di.DisplayName = value.String
			}
		case deviceiot.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				di.SerialNumber = new(string)
				*di.SerialNumber = value.String
			}
		case deviceiot.FieldTypeDevice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_device", values[i])
			} else if value.Valid {
				di.TypeDevice = new(int)
				*di.TypeDevice = int(value.Int64)
			}
		case deviceiot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Time
			}
		case deviceiot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Time
			}
		case deviceiot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field main_iot_deviceiots", value)
			} else if value.Valid {
				di.main_iot_deviceiots = new(int64)
				*di.main_iot_deviceiots = int64(value.Int64)
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeviceIot.
// This includes values selected through modifiers, order, etc.
func (di *DeviceIot) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the DeviceIot entity.
func (di *DeviceIot) QueryOwner() *MainIotQuery {
	return NewDeviceIotClient(di.config).QueryOwner(di)
}

// Update returns a builder for updating this DeviceIot.
// Note that you need to call DeviceIot.Unwrap() before calling this method if this DeviceIot
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DeviceIot) Update() *DeviceIotUpdateOne {
	return NewDeviceIotClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DeviceIot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DeviceIot) Unwrap() *DeviceIot {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeviceIot is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DeviceIot) String() string {
	var builder strings.Builder
	builder.WriteString("DeviceIot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("display_name=")
	builder.WriteString(di.DisplayName)
	builder.WriteString(", ")
	if v := di.SerialNumber; v != nil {
		builder.WriteString("serial_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := di.TypeDevice; v != nil {
		builder.WriteString("type_device=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(di.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(di.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeviceIots is a parsable slice of DeviceIot.
type DeviceIots []*DeviceIot
