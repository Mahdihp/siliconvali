// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"siliconvali/ent/devicedetails"
	"siliconvali/ent/deviceiot"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceDetailsCreate is the builder for creating a DeviceDetails entity.
type DeviceDetailsCreate struct {
	config
	mutation *DeviceDetailsMutation
	hooks    []Hook
}

// SetLightStatus sets the "light_status" field.
func (ddc *DeviceDetailsCreate) SetLightStatus(b bool) *DeviceDetailsCreate {
	ddc.mutation.SetLightStatus(b)
	return ddc
}

// SetNillableLightStatus sets the "light_status" field if the given value is not nil.
func (ddc *DeviceDetailsCreate) SetNillableLightStatus(b *bool) *DeviceDetailsCreate {
	if b != nil {
		ddc.SetLightStatus(*b)
	}
	return ddc
}

// SetID sets the "id" field.
func (ddc *DeviceDetailsCreate) SetID(i int) *DeviceDetailsCreate {
	ddc.mutation.SetID(i)
	return ddc
}

// SetDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by ID.
func (ddc *DeviceDetailsCreate) SetDeviceiotIDID(id int64) *DeviceDetailsCreate {
	ddc.mutation.SetDeviceiotIDID(id)
	return ddc
}

// SetNillableDeviceiotIDID sets the "deviceiot_id" edge to the DeviceIot entity by ID if the given value is not nil.
func (ddc *DeviceDetailsCreate) SetNillableDeviceiotIDID(id *int64) *DeviceDetailsCreate {
	if id != nil {
		ddc = ddc.SetDeviceiotIDID(*id)
	}
	return ddc
}

// SetDeviceiotID sets the "deviceiot_id" edge to the DeviceIot entity.
func (ddc *DeviceDetailsCreate) SetDeviceiotID(d *DeviceIot) *DeviceDetailsCreate {
	return ddc.SetDeviceiotIDID(d.ID)
}

// Mutation returns the DeviceDetailsMutation object of the builder.
func (ddc *DeviceDetailsCreate) Mutation() *DeviceDetailsMutation {
	return ddc.mutation
}

// Save creates the DeviceDetails in the database.
func (ddc *DeviceDetailsCreate) Save(ctx context.Context) (*DeviceDetails, error) {
	return withHooks(ctx, ddc.sqlSave, ddc.mutation, ddc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ddc *DeviceDetailsCreate) SaveX(ctx context.Context) *DeviceDetails {
	v, err := ddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddc *DeviceDetailsCreate) Exec(ctx context.Context) error {
	_, err := ddc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddc *DeviceDetailsCreate) ExecX(ctx context.Context) {
	if err := ddc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddc *DeviceDetailsCreate) check() error {
	return nil
}

func (ddc *DeviceDetailsCreate) sqlSave(ctx context.Context) (*DeviceDetails, error) {
	if err := ddc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ddc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ddc.mutation.id = &_node.ID
	ddc.mutation.done = true
	return _node, nil
}

func (ddc *DeviceDetailsCreate) createSpec() (*DeviceDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceDetails{config: ddc.config}
		_spec = sqlgraph.NewCreateSpec(devicedetails.Table, sqlgraph.NewFieldSpec(devicedetails.FieldID, field.TypeInt))
	)
	if id, ok := ddc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ddc.mutation.LightStatus(); ok {
		_spec.SetField(devicedetails.FieldLightStatus, field.TypeBool, value)
		_node.LightStatus = &value
	}
	if nodes := ddc.mutation.DeviceiotIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicedetails.DeviceiotIDTable,
			Columns: []string{devicedetails.DeviceiotIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_iot_devicedetails = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceDetailsCreateBulk is the builder for creating many DeviceDetails entities in bulk.
type DeviceDetailsCreateBulk struct {
	config
	err      error
	builders []*DeviceDetailsCreate
}

// Save creates the DeviceDetails entities in the database.
func (ddcb *DeviceDetailsCreateBulk) Save(ctx context.Context) ([]*DeviceDetails, error) {
	if ddcb.err != nil {
		return nil, ddcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ddcb.builders))
	nodes := make([]*DeviceDetails, len(ddcb.builders))
	mutators := make([]Mutator, len(ddcb.builders))
	for i := range ddcb.builders {
		func(i int, root context.Context) {
			builder := ddcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ddcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ddcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ddcb *DeviceDetailsCreateBulk) SaveX(ctx context.Context) []*DeviceDetails {
	v, err := ddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddcb *DeviceDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := ddcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddcb *DeviceDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := ddcb.Exec(ctx); err != nil {
		panic(err)
	}
}
