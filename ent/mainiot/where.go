// Code generated by ent, DO NOT EDIT.

package mainiot

import (
	"siliconvali/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldID, id))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldDisplayName, v))
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldLat, v))
}

// Lon applies equality check predicate on the "lon" field. It's identical to LonEQ.
func Lon(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldLon, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldAddress, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldSerialNumber, v))
}

// MACAddress applies equality check predicate on the "mac_address" field. It's identical to MACAddressEQ.
func MACAddress(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldMACAddress, v))
}

// IPRemote applies equality check predicate on the "ip_remote" field. It's identical to IPRemoteEQ.
func IPRemote(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldIPRemote, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldStatus, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldUpdatedAt, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldDisplayName, v))
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldLat, v))
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldLat, v))
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldLat, vs...))
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldLat, vs...))
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldLat, v))
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldLat, v))
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldLat, v))
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldLat, v))
}

// LatIsNil applies the IsNil predicate on the "lat" field.
func LatIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldLat))
}

// LatNotNil applies the NotNil predicate on the "lat" field.
func LatNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldLat))
}

// LonEQ applies the EQ predicate on the "lon" field.
func LonEQ(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldLon, v))
}

// LonNEQ applies the NEQ predicate on the "lon" field.
func LonNEQ(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldLon, v))
}

// LonIn applies the In predicate on the "lon" field.
func LonIn(vs ...float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldLon, vs...))
}

// LonNotIn applies the NotIn predicate on the "lon" field.
func LonNotIn(vs ...float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldLon, vs...))
}

// LonGT applies the GT predicate on the "lon" field.
func LonGT(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldLon, v))
}

// LonGTE applies the GTE predicate on the "lon" field.
func LonGTE(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldLon, v))
}

// LonLT applies the LT predicate on the "lon" field.
func LonLT(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldLon, v))
}

// LonLTE applies the LTE predicate on the "lon" field.
func LonLTE(v float64) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldLon, v))
}

// LonIsNil applies the IsNil predicate on the "lon" field.
func LonIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldLon))
}

// LonNotNil applies the NotNil predicate on the "lon" field.
func LonNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldLon))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldAddress, v))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberIsNil applies the IsNil predicate on the "serial_number" field.
func SerialNumberIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldSerialNumber))
}

// SerialNumberNotNil applies the NotNil predicate on the "serial_number" field.
func SerialNumberNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldSerialNumber))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldSerialNumber, v))
}

// MACAddressEQ applies the EQ predicate on the "mac_address" field.
func MACAddressEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldMACAddress, v))
}

// MACAddressNEQ applies the NEQ predicate on the "mac_address" field.
func MACAddressNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldMACAddress, v))
}

// MACAddressIn applies the In predicate on the "mac_address" field.
func MACAddressIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldMACAddress, vs...))
}

// MACAddressNotIn applies the NotIn predicate on the "mac_address" field.
func MACAddressNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldMACAddress, vs...))
}

// MACAddressGT applies the GT predicate on the "mac_address" field.
func MACAddressGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldMACAddress, v))
}

// MACAddressGTE applies the GTE predicate on the "mac_address" field.
func MACAddressGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldMACAddress, v))
}

// MACAddressLT applies the LT predicate on the "mac_address" field.
func MACAddressLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldMACAddress, v))
}

// MACAddressLTE applies the LTE predicate on the "mac_address" field.
func MACAddressLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldMACAddress, v))
}

// MACAddressContains applies the Contains predicate on the "mac_address" field.
func MACAddressContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldMACAddress, v))
}

// MACAddressHasPrefix applies the HasPrefix predicate on the "mac_address" field.
func MACAddressHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldMACAddress, v))
}

// MACAddressHasSuffix applies the HasSuffix predicate on the "mac_address" field.
func MACAddressHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldMACAddress, v))
}

// MACAddressIsNil applies the IsNil predicate on the "mac_address" field.
func MACAddressIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldMACAddress))
}

// MACAddressNotNil applies the NotNil predicate on the "mac_address" field.
func MACAddressNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldMACAddress))
}

// MACAddressEqualFold applies the EqualFold predicate on the "mac_address" field.
func MACAddressEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldMACAddress, v))
}

// MACAddressContainsFold applies the ContainsFold predicate on the "mac_address" field.
func MACAddressContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldMACAddress, v))
}

// IPRemoteEQ applies the EQ predicate on the "ip_remote" field.
func IPRemoteEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldIPRemote, v))
}

// IPRemoteNEQ applies the NEQ predicate on the "ip_remote" field.
func IPRemoteNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldIPRemote, v))
}

// IPRemoteIn applies the In predicate on the "ip_remote" field.
func IPRemoteIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldIPRemote, vs...))
}

// IPRemoteNotIn applies the NotIn predicate on the "ip_remote" field.
func IPRemoteNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldIPRemote, vs...))
}

// IPRemoteGT applies the GT predicate on the "ip_remote" field.
func IPRemoteGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldIPRemote, v))
}

// IPRemoteGTE applies the GTE predicate on the "ip_remote" field.
func IPRemoteGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldIPRemote, v))
}

// IPRemoteLT applies the LT predicate on the "ip_remote" field.
func IPRemoteLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldIPRemote, v))
}

// IPRemoteLTE applies the LTE predicate on the "ip_remote" field.
func IPRemoteLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldIPRemote, v))
}

// IPRemoteContains applies the Contains predicate on the "ip_remote" field.
func IPRemoteContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldIPRemote, v))
}

// IPRemoteHasPrefix applies the HasPrefix predicate on the "ip_remote" field.
func IPRemoteHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldIPRemote, v))
}

// IPRemoteHasSuffix applies the HasSuffix predicate on the "ip_remote" field.
func IPRemoteHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldIPRemote, v))
}

// IPRemoteIsNil applies the IsNil predicate on the "ip_remote" field.
func IPRemoteIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldIPRemote))
}

// IPRemoteNotNil applies the NotNil predicate on the "ip_remote" field.
func IPRemoteNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldIPRemote))
}

// IPRemoteEqualFold applies the EqualFold predicate on the "ip_remote" field.
func IPRemoteEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldIPRemote, v))
}

// IPRemoteContainsFold applies the ContainsFold predicate on the "ip_remote" field.
func IPRemoteContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldIPRemote, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MainIot {
	return predicate.MainIot(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.MainIot {
	return predicate.MainIot(sql.FieldContainsFold(FieldStatus, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MainIot {
	return predicate.MainIot(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDeviceiots applies the HasEdge predicate on the "deviceiots" edge.
func HasDeviceiots() predicate.MainIot {
	return predicate.MainIot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeviceiotsTable, DeviceiotsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceiotsWith applies the HasEdge predicate on the "deviceiots" edge with a given conditions (other predicates).
func HasDeviceiotsWith(preds ...predicate.DeviceIot) predicate.MainIot {
	return predicate.MainIot(func(s *sql.Selector) {
		step := newDeviceiotsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserID applies the HasEdge predicate on the "user_id" edge.
func HasUserID() predicate.MainIot {
	return predicate.MainIot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDWith applies the HasEdge predicate on the "user_id" edge with a given conditions (other predicates).
func HasUserIDWith(preds ...predicate.User) predicate.MainIot {
	return predicate.MainIot(func(s *sql.Selector) {
		step := newUserIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MainIot) predicate.MainIot {
	return predicate.MainIot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MainIot) predicate.MainIot {
	return predicate.MainIot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MainIot) predicate.MainIot {
	return predicate.MainIot(sql.NotPredicates(p))
}
