// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"siliconvali/ent/deviceiot"
	"siliconvali/ent/mainiot"
	"siliconvali/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MainIotCreate is the builder for creating a MainIot entity.
type MainIotCreate struct {
	config
	mutation *MainIotMutation
	hooks    []Hook
}

// SetDisplayName sets the "display_name" field.
func (mic *MainIotCreate) SetDisplayName(s string) *MainIotCreate {
	mic.mutation.SetDisplayName(s)
	return mic
}

// SetLat sets the "lat" field.
func (mic *MainIotCreate) SetLat(f float64) *MainIotCreate {
	mic.mutation.SetLat(f)
	return mic
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableLat(f *float64) *MainIotCreate {
	if f != nil {
		mic.SetLat(*f)
	}
	return mic
}

// SetLon sets the "lon" field.
func (mic *MainIotCreate) SetLon(f float64) *MainIotCreate {
	mic.mutation.SetLon(f)
	return mic
}

// SetNillableLon sets the "lon" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableLon(f *float64) *MainIotCreate {
	if f != nil {
		mic.SetLon(*f)
	}
	return mic
}

// SetAddress sets the "address" field.
func (mic *MainIotCreate) SetAddress(s string) *MainIotCreate {
	mic.mutation.SetAddress(s)
	return mic
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableAddress(s *string) *MainIotCreate {
	if s != nil {
		mic.SetAddress(*s)
	}
	return mic
}

// SetSerialNumber sets the "serial_number" field.
func (mic *MainIotCreate) SetSerialNumber(s string) *MainIotCreate {
	mic.mutation.SetSerialNumber(s)
	return mic
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableSerialNumber(s *string) *MainIotCreate {
	if s != nil {
		mic.SetSerialNumber(*s)
	}
	return mic
}

// SetMACAddress sets the "mac_address" field.
func (mic *MainIotCreate) SetMACAddress(s string) *MainIotCreate {
	mic.mutation.SetMACAddress(s)
	return mic
}

// SetNillableMACAddress sets the "mac_address" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableMACAddress(s *string) *MainIotCreate {
	if s != nil {
		mic.SetMACAddress(*s)
	}
	return mic
}

// SetIPRemote sets the "ip_remote" field.
func (mic *MainIotCreate) SetIPRemote(s string) *MainIotCreate {
	mic.mutation.SetIPRemote(s)
	return mic
}

// SetNillableIPRemote sets the "ip_remote" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableIPRemote(s *string) *MainIotCreate {
	if s != nil {
		mic.SetIPRemote(*s)
	}
	return mic
}

// SetStatus sets the "status" field.
func (mic *MainIotCreate) SetStatus(s string) *MainIotCreate {
	mic.mutation.SetStatus(s)
	return mic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableStatus(s *string) *MainIotCreate {
	if s != nil {
		mic.SetStatus(*s)
	}
	return mic
}

// SetActive sets the "active" field.
func (mic *MainIotCreate) SetActive(b bool) *MainIotCreate {
	mic.mutation.SetActive(b)
	return mic
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableActive(b *bool) *MainIotCreate {
	if b != nil {
		mic.SetActive(*b)
	}
	return mic
}

// SetCreatedAt sets the "created_at" field.
func (mic *MainIotCreate) SetCreatedAt(t time.Time) *MainIotCreate {
	mic.mutation.SetCreatedAt(t)
	return mic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableCreatedAt(t *time.Time) *MainIotCreate {
	if t != nil {
		mic.SetCreatedAt(*t)
	}
	return mic
}

// SetUpdatedAt sets the "updated_at" field.
func (mic *MainIotCreate) SetUpdatedAt(t time.Time) *MainIotCreate {
	mic.mutation.SetUpdatedAt(t)
	return mic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mic *MainIotCreate) SetNillableUpdatedAt(t *time.Time) *MainIotCreate {
	if t != nil {
		mic.SetUpdatedAt(*t)
	}
	return mic
}

// SetID sets the "id" field.
func (mic *MainIotCreate) SetID(i int64) *MainIotCreate {
	mic.mutation.SetID(i)
	return mic
}

// AddDeviceiotIDs adds the "deviceiots" edge to the DeviceIot entity by IDs.
func (mic *MainIotCreate) AddDeviceiotIDs(ids ...int64) *MainIotCreate {
	mic.mutation.AddDeviceiotIDs(ids...)
	return mic
}

// AddDeviceiots adds the "deviceiots" edges to the DeviceIot entity.
func (mic *MainIotCreate) AddDeviceiots(d ...*DeviceIot) *MainIotCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mic.AddDeviceiotIDs(ids...)
}

// SetUserIDID sets the "user_id" edge to the User entity by UserId.
func (mic *MainIotCreate) SetUserIDID(id int64) *MainIotCreate {
	mic.mutation.SetUserIDID(id)
	return mic
}

// SetUserID sets the "user_id" edge to the User entity.
func (mic *MainIotCreate) SetUserID(u *User) *MainIotCreate {
	return mic.SetUserIDID(u.ID)
}

// Mutation returns the MainIotMutation object of the builder.
func (mic *MainIotCreate) Mutation() *MainIotMutation {
	return mic.mutation
}

// Save creates the MainIot in the database.
func (mic *MainIotCreate) Save(ctx context.Context) (*MainIot, error) {
	mic.defaults()
	return withHooks(ctx, mic.sqlSave, mic.mutation, mic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mic *MainIotCreate) SaveX(ctx context.Context) *MainIot {
	v, err := mic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mic *MainIotCreate) Exec(ctx context.Context) error {
	_, err := mic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mic *MainIotCreate) ExecX(ctx context.Context) {
	if err := mic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mic *MainIotCreate) defaults() {
	if _, ok := mic.mutation.Active(); !ok {
		v := mainiot.DefaultActive
		mic.mutation.SetActive(v)
	}
	if _, ok := mic.mutation.CreatedAt(); !ok {
		v := mainiot.DefaultCreatedAt()
		mic.mutation.SetCreatedAt(v)
	}
	if _, ok := mic.mutation.UpdatedAt(); !ok {
		v := mainiot.DefaultUpdatedAt
		mic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mic *MainIotCreate) check() error {
	if _, ok := mic.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "MainIot.display_name"`)}
	}
	if v, ok := mic.mutation.DisplayName(); ok {
		if err := mainiot.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "MainIot.display_name": %w`, err)}
		}
	}
	if v, ok := mic.mutation.Address(); ok {
		if err := mainiot.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "MainIot.address": %w`, err)}
		}
	}
	if v, ok := mic.mutation.SerialNumber(); ok {
		if err := mainiot.SerialNumberValidator(v); err != nil {
			return &ValidationError{Name: "serial_number", err: fmt.Errorf(`ent: validator failed for field "MainIot.serial_number": %w`, err)}
		}
	}
	if v, ok := mic.mutation.MACAddress(); ok {
		if err := mainiot.MACAddressValidator(v); err != nil {
			return &ValidationError{Name: "mac_address", err: fmt.Errorf(`ent: validator failed for field "MainIot.mac_address": %w`, err)}
		}
	}
	if v, ok := mic.mutation.IPRemote(); ok {
		if err := mainiot.IPRemoteValidator(v); err != nil {
			return &ValidationError{Name: "ip_remote", err: fmt.Errorf(`ent: validator failed for field "MainIot.ip_remote": %w`, err)}
		}
	}
	if _, ok := mic.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "MainIot.active"`)}
	}
	if _, ok := mic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MainIot.created_at"`)}
	}
	if _, ok := mic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MainIot.updated_at"`)}
	}
	if _, ok := mic.mutation.UserIDID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required edge "MainIot.user_id"`)}
	}
	return nil
}

func (mic *MainIotCreate) sqlSave(ctx context.Context) (*MainIot, error) {
	if err := mic.check(); err != nil {
		return nil, err
	}
	_node, _spec := mic.createSpec()
	if err := sqlgraph.CreateNode(ctx, mic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mic.mutation.id = &_node.ID
	mic.mutation.done = true
	return _node, nil
}

func (mic *MainIotCreate) createSpec() (*MainIot, *sqlgraph.CreateSpec) {
	var (
		_node = &MainIot{config: mic.config}
		_spec = sqlgraph.NewCreateSpec(mainiot.Table, sqlgraph.NewFieldSpec(mainiot.FieldID, field.TypeInt64))
	)
	if id, ok := mic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mic.mutation.DisplayName(); ok {
		_spec.SetField(mainiot.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := mic.mutation.Lat(); ok {
		_spec.SetField(mainiot.FieldLat, field.TypeFloat64, value)
		_node.Lat = &value
	}
	if value, ok := mic.mutation.Lon(); ok {
		_spec.SetField(mainiot.FieldLon, field.TypeFloat64, value)
		_node.Lon = &value
	}
	if value, ok := mic.mutation.Address(); ok {
		_spec.SetField(mainiot.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := mic.mutation.SerialNumber(); ok {
		_spec.SetField(mainiot.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = &value
	}
	if value, ok := mic.mutation.MACAddress(); ok {
		_spec.SetField(mainiot.FieldMACAddress, field.TypeString, value)
		_node.MACAddress = &value
	}
	if value, ok := mic.mutation.IPRemote(); ok {
		_spec.SetField(mainiot.FieldIPRemote, field.TypeString, value)
		_node.IPRemote = &value
	}
	if value, ok := mic.mutation.Status(); ok {
		_spec.SetField(mainiot.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := mic.mutation.Active(); ok {
		_spec.SetField(mainiot.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := mic.mutation.CreatedAt(); ok {
		_spec.SetField(mainiot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mic.mutation.UpdatedAt(); ok {
		_spec.SetField(mainiot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mic.mutation.DeviceiotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainiot.DeviceiotsTable,
			Columns: []string{mainiot.DeviceiotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deviceiot.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mainiot.UserIDTable,
			Columns: []string{mainiot.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_mainiots = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MainIotCreateBulk is the builder for creating many MainIot entities in bulk.
type MainIotCreateBulk struct {
	config
	err      error
	builders []*MainIotCreate
}

// Save creates the MainIot entities in the database.
func (micb *MainIotCreateBulk) Save(ctx context.Context) ([]*MainIot, error) {
	if micb.err != nil {
		return nil, micb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(micb.builders))
	nodes := make([]*MainIot, len(micb.builders))
	mutators := make([]Mutator, len(micb.builders))
	for i := range micb.builders {
		func(i int, root context.Context) {
			builder := micb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MainIotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, micb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, micb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, micb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (micb *MainIotCreateBulk) SaveX(ctx context.Context) []*MainIot {
	v, err := micb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (micb *MainIotCreateBulk) Exec(ctx context.Context) error {
	_, err := micb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (micb *MainIotCreateBulk) ExecX(ctx context.Context) {
	if err := micb.Exec(ctx); err != nil {
		panic(err)
	}
}
