// Code generated by ent, DO NOT EDIT.

package deviceiot

import (
	"siliconvali/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldID, id))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldDisplayName, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldSerialNumber, v))
}

// TypeDevice applies equality check predicate on the "type_device" field. It's identical to TypeDeviceEQ.
func TypeDevice(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldTypeDevice, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldUpdatedAt, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldContainsFold(FieldDisplayName, v))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberIsNil applies the IsNil predicate on the "serial_number" field.
func SerialNumberIsNil() predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIsNull(FieldSerialNumber))
}

// SerialNumberNotNil applies the NotNil predicate on the "serial_number" field.
func SerialNumberNotNil() predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotNull(FieldSerialNumber))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldContainsFold(FieldSerialNumber, v))
}

// TypeDeviceEQ applies the EQ predicate on the "type_device" field.
func TypeDeviceEQ(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldTypeDevice, v))
}

// TypeDeviceNEQ applies the NEQ predicate on the "type_device" field.
func TypeDeviceNEQ(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldTypeDevice, v))
}

// TypeDeviceIn applies the In predicate on the "type_device" field.
func TypeDeviceIn(vs ...int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldTypeDevice, vs...))
}

// TypeDeviceNotIn applies the NotIn predicate on the "type_device" field.
func TypeDeviceNotIn(vs ...int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldTypeDevice, vs...))
}

// TypeDeviceGT applies the GT predicate on the "type_device" field.
func TypeDeviceGT(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldTypeDevice, v))
}

// TypeDeviceGTE applies the GTE predicate on the "type_device" field.
func TypeDeviceGTE(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldTypeDevice, v))
}

// TypeDeviceLT applies the LT predicate on the "type_device" field.
func TypeDeviceLT(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldTypeDevice, v))
}

// TypeDeviceLTE applies the LTE predicate on the "type_device" field.
func TypeDeviceLTE(v int) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldTypeDevice, v))
}

// TypeDeviceIsNil applies the IsNil predicate on the "type_device" field.
func TypeDeviceIsNil() predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIsNull(FieldTypeDevice))
}

// TypeDeviceNotNil applies the NotNil predicate on the "type_device" field.
func TypeDeviceNotNil() predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotNull(FieldTypeDevice))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeviceIot {
	return predicate.DeviceIot(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.DeviceIot {
	return predicate.DeviceIot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.MainIot) predicate.DeviceIot {
	return predicate.DeviceIot(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeviceIot) predicate.DeviceIot {
	return predicate.DeviceIot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeviceIot) predicate.DeviceIot {
	return predicate.DeviceIot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeviceIot) predicate.DeviceIot {
	return predicate.DeviceIot(sql.NotPredicates(p))
}
