// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"siliconvali/ent/plan"
	"siliconvali/ent/user"
	"siliconvali/ent/userpaymentplan"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserPaymentPlan is the model entity for the UserPaymentPlan schema.
type UserPaymentPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// مبلغ
	Amount int64 `json:"amount,omitempty"`
	// کد پیگیری
	ReferenceNumber string `json:"reference_number,omitempty"`
	// کد تراکنش
	TransactionNumber *string `json:"transaction_number,omitempty"`
	// شماره حساب مبدا
	SourceAccountNumber *string `json:"source_account_number,omitempty"`
	// شماره حساب مقصد
	DestinationAccountNumber *string `json:"destination_account_number,omitempty"`
	// حذف منطقی
	Deleted bool `json:"deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPaymentPlanQuery when eager-loading is set.
	Edges                 UserPaymentPlanEdges `json:"edges"`
	plan_userpaymentplans *int
	user_userpaymentplans *int64
	selectValues          sql.SelectValues
}

// UserPaymentPlanEdges holds the relations/edges for other nodes in the graph.
type UserPaymentPlanEdges struct {
	// UserID holds the value of the user_id edge.
	UserID *User `json:"user_id,omitempty"`
	// PlanID holds the value of the plan_id edge.
	PlanID *Plan `json:"plan_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPaymentPlanEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.UserID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "user_id"}
}

// PlanIDOrErr returns the PlanID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPaymentPlanEdges) PlanIDOrErr() (*Plan, error) {
	if e.loadedTypes[1] {
		if e.PlanID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.PlanID, nil
	}
	return nil, &NotLoadedError{edge: "plan_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPaymentPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpaymentplan.FieldDeleted:
			values[i] = new(sql.NullBool)
		case userpaymentplan.FieldID, userpaymentplan.FieldAmount:
			values[i] = new(sql.NullInt64)
		case userpaymentplan.FieldReferenceNumber, userpaymentplan.FieldTransactionNumber, userpaymentplan.FieldSourceAccountNumber, userpaymentplan.FieldDestinationAccountNumber:
			values[i] = new(sql.NullString)
		case userpaymentplan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case userpaymentplan.ForeignKeys[0]: // plan_userpaymentplans
			values[i] = new(sql.NullInt64)
		case userpaymentplan.ForeignKeys[1]: // user_userpaymentplans
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPaymentPlan fields.
func (upp *UserPaymentPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpaymentplan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upp.ID = int64(value.Int64)
		case userpaymentplan.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				upp.Amount = value.Int64
			}
		case userpaymentplan.FieldReferenceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_number", values[i])
			} else if value.Valid {
				upp.ReferenceNumber = value.String
			}
		case userpaymentplan.FieldTransactionNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_number", values[i])
			} else if value.Valid {
				upp.TransactionNumber = new(string)
				*upp.TransactionNumber = value.String
			}
		case userpaymentplan.FieldSourceAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_account_number", values[i])
			} else if value.Valid {
				upp.SourceAccountNumber = new(string)
				*upp.SourceAccountNumber = value.String
			}
		case userpaymentplan.FieldDestinationAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_account_number", values[i])
			} else if value.Valid {
				upp.DestinationAccountNumber = new(string)
				*upp.DestinationAccountNumber = value.String
			}
		case userpaymentplan.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				upp.Deleted = value.Bool
			}
		case userpaymentplan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				upp.CreatedAt = value.Time
			}
		case userpaymentplan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plan_userpaymentplans", value)
			} else if value.Valid {
				upp.plan_userpaymentplans = new(int)
				*upp.plan_userpaymentplans = int(value.Int64)
			}
		case userpaymentplan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_userpaymentplans", value)
			} else if value.Valid {
				upp.user_userpaymentplans = new(int64)
				*upp.user_userpaymentplans = int64(value.Int64)
			}
		default:
			upp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPaymentPlan.
// This includes values selected through modifiers, order, etc.
func (upp *UserPaymentPlan) Value(name string) (ent.Value, error) {
	return upp.selectValues.Get(name)
}

// QueryUserID queries the "user_id" edge of the UserPaymentPlan entity.
func (upp *UserPaymentPlan) QueryUserID() *UserQuery {
	return NewUserPaymentPlanClient(upp.config).QueryUserID(upp)
}

// QueryPlanID queries the "plan_id" edge of the UserPaymentPlan entity.
func (upp *UserPaymentPlan) QueryPlanID() *PlanQuery {
	return NewUserPaymentPlanClient(upp.config).QueryPlanID(upp)
}

// Update returns a builder for updating this UserPaymentPlan.
// Note that you need to call UserPaymentPlan.Unwrap() before calling this method if this UserPaymentPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (upp *UserPaymentPlan) Update() *UserPaymentPlanUpdateOne {
	return NewUserPaymentPlanClient(upp.config).UpdateOne(upp)
}

// Unwrap unwraps the UserPaymentPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upp *UserPaymentPlan) Unwrap() *UserPaymentPlan {
	_tx, ok := upp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPaymentPlan is not a transactional entity")
	}
	upp.config.driver = _tx.drv
	return upp
}

// String implements the fmt.Stringer.
func (upp *UserPaymentPlan) String() string {
	var builder strings.Builder
	builder.WriteString("UserPaymentPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", upp.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", upp.Amount))
	builder.WriteString(", ")
	builder.WriteString("reference_number=")
	builder.WriteString(upp.ReferenceNumber)
	builder.WriteString(", ")
	if v := upp.TransactionNumber; v != nil {
		builder.WriteString("transaction_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := upp.SourceAccountNumber; v != nil {
		builder.WriteString("source_account_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := upp.DestinationAccountNumber; v != nil {
		builder.WriteString("destination_account_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", upp.Deleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(upp.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPaymentPlans is a parsable slice of UserPaymentPlan.
type UserPaymentPlans []*UserPaymentPlan
