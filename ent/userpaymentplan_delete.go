// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"siliconvali/ent/predicate"
	"siliconvali/ent/userpaymentplan"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPaymentPlanDelete is the builder for deleting a UserPaymentPlan entity.
type UserPaymentPlanDelete struct {
	config
	hooks    []Hook
	mutation *UserPaymentPlanMutation
}

// Where appends a list predicates to the UserPaymentPlanDelete builder.
func (uppd *UserPaymentPlanDelete) Where(ps ...predicate.UserPaymentPlan) *UserPaymentPlanDelete {
	uppd.mutation.Where(ps...)
	return uppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uppd *UserPaymentPlanDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uppd.sqlExec, uppd.mutation, uppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uppd *UserPaymentPlanDelete) ExecX(ctx context.Context) int {
	n, err := uppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uppd *UserPaymentPlanDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userpaymentplan.Table, sqlgraph.NewFieldSpec(userpaymentplan.FieldID, field.TypeInt64))
	if ps := uppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uppd.mutation.done = true
	return affected, err
}

// UserPaymentPlanDeleteOne is the builder for deleting a single UserPaymentPlan entity.
type UserPaymentPlanDeleteOne struct {
	uppd *UserPaymentPlanDelete
}

// Where appends a list predicates to the UserPaymentPlanDelete builder.
func (uppdo *UserPaymentPlanDeleteOne) Where(ps ...predicate.UserPaymentPlan) *UserPaymentPlanDeleteOne {
	uppdo.uppd.mutation.Where(ps...)
	return uppdo
}

// Exec executes the deletion query.
func (uppdo *UserPaymentPlanDeleteOne) Exec(ctx context.Context) error {
	n, err := uppdo.uppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userpaymentplan.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uppdo *UserPaymentPlanDeleteOne) ExecX(ctx context.Context) {
	if err := uppdo.Exec(ctx); err != nil {
		panic(err)
	}
}
