// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"siliconvali/ent/devicedetails"
	"siliconvali/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceDetailsDelete is the builder for deleting a DeviceDetails entity.
type DeviceDetailsDelete struct {
	config
	hooks    []Hook
	mutation *DeviceDetailsMutation
}

// Where appends a list predicates to the DeviceDetailsDelete builder.
func (ddd *DeviceDetailsDelete) Where(ps ...predicate.DeviceDetails) *DeviceDetailsDelete {
	ddd.mutation.Where(ps...)
	return ddd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ddd *DeviceDetailsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ddd.sqlExec, ddd.mutation, ddd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ddd *DeviceDetailsDelete) ExecX(ctx context.Context) int {
	n, err := ddd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ddd *DeviceDetailsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(devicedetails.Table, sqlgraph.NewFieldSpec(devicedetails.FieldID, field.TypeInt))
	if ps := ddd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ddd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ddd.mutation.done = true
	return affected, err
}

// DeviceDetailsDeleteOne is the builder for deleting a single DeviceDetails entity.
type DeviceDetailsDeleteOne struct {
	ddd *DeviceDetailsDelete
}

// Where appends a list predicates to the DeviceDetailsDelete builder.
func (dddo *DeviceDetailsDeleteOne) Where(ps ...predicate.DeviceDetails) *DeviceDetailsDeleteOne {
	dddo.ddd.mutation.Where(ps...)
	return dddo
}

// Exec executes the deletion query.
func (dddo *DeviceDetailsDeleteOne) Exec(ctx context.Context) error {
	n, err := dddo.ddd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{devicedetails.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dddo *DeviceDetailsDeleteOne) ExecX(ctx context.Context) {
	if err := dddo.Exec(ctx); err != nil {
		panic(err)
	}
}
